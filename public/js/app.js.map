{"version":3,"sources":["sweetalert.min.js","parsleyConfig.js","parsley.js","spin.js","jquery.spin.js","profile.js","dashboard.js","app.js"],"names":[],"mappingsrztfile":"app.js","sourcesContent":["!function(e,t,n){\"use strict\";!function o(e,t,n){function a(s,l){if(!t[s]){if(!e[s]){var i=\"function\"==typeof require&&require;if(!l&&i)return i(s,!0);if(r)return r(s,!0);var u=new Error(\"Cannot find module '\"+s+\"'\");throw u.code=\"MODULE_NOT_FOUND\",u}var c=t[s]={exports:{}};e[s][0].call(c.exports,function(t){var n=e[s][1][t];return a(n?n:t)},c,c.exports,o,e,t,n)}return t[s].exports}for(var r=\"function\"==typeof require&&require,s=0;s<n.length;s++)a(n[s]);return a}({1:[function(o){var a,r,s,l,i=function(e){return e&&e.__esModule?e:{\"default\":e}},u=o(\"./modules/handle-dom\"),c=o(\"./modules/utils\"),d=o(\"./modules/handle-swal-dom\"),f=o(\"./modules/handle-click\"),p=o(\"./modules/handle-key\"),m=i(p),v=o(\"./modules/default-params\"),y=i(v),h=o(\"./modules/set-params\"),g=i(h);s=l=function(){function o(e){var t=s;return t[e]===n?y[\"default\"][e]:t[e]}var s=arguments[0];if(u.addClass(t.body,\"stop-scrolling\"),d.resetInput(),s===n)return c.logStr(\"SweetAlert expects at least 1 attribute!\"),!1;var l=c.extend({},y[\"default\"]);switch(typeof s){case\"string\":l.title=s,l.text=arguments[1]||\"\",l.type=arguments[2]||\"\";break;case\"object\":if(s.title===n)return c.logStr('Missing \"title\" argument!'),!1;l.title=s.title;for(var i in y[\"default\"])l[i]=o(i);l.confirmButtonText=l.showCancelButton?\"Confirm\":y[\"default\"].confirmButtonText,l.confirmButtonText=o(\"confirmButtonText\"),l.doneFunction=arguments[1]||null;break;default:return c.logStr('Unexpected type of argument! Expected \"string\" or \"object\", got '+typeof s),!1}g[\"default\"](l),d.fixVerticalPosition(),d.openModal(arguments[1]);for(var p=d.getModal(),v=p.querySelectorAll(\"button\"),h=[\"onclick\",\"onmouseover\",\"onmouseout\",\"onmousedown\",\"onmouseup\",\"onfocus\"],b=function(e){return f.handleButton(e,l,p)},w=0;w<v.length;w++)for(var C=0;C<h.length;C++){var S=h[C];v[w][S]=b}d.getOverlay().onclick=b,a=e.onkeydown;var x=function(e){return m[\"default\"](e,l,p)};e.onkeydown=x,e.onfocus=function(){setTimeout(function(){r!==n&&(r.focus(),r=n)},0)}},s.setDefaults=l.setDefaults=function(e){if(!e)throw new Error(\"userParams is required\");if(\"object\"!=typeof e)throw new Error(\"userParams has to be a object\");c.extend(y[\"default\"],e)},s.close=l.close=function(){var o=d.getModal();u.fadeOut(d.getOverlay(),5),u.fadeOut(o,5),u.removeClass(o,\"showSweetAlert\"),u.addClass(o,\"hideSweetAlert\"),u.removeClass(o,\"visible\");var s=o.querySelector(\".sa-icon.sa-success\");u.removeClass(s,\"animate\"),u.removeClass(s.querySelector(\".sa-tip\"),\"animateSuccessTip\"),u.removeClass(s.querySelector(\".sa-long\"),\"animateSuccessLong\");var l=o.querySelector(\".sa-icon.sa-error\");u.removeClass(l,\"animateErrorIcon\"),u.removeClass(l.querySelector(\".sa-x-mark\"),\"animateXMark\");var i=o.querySelector(\".sa-icon.sa-warning\");return u.removeClass(i,\"pulseWarning\"),u.removeClass(i.querySelector(\".sa-body\"),\"pulseWarningIns\"),u.removeClass(i.querySelector(\".sa-dot\"),\"pulseWarningIns\"),setTimeout(function(){var e=o.getAttribute(\"data-custom-class\");u.removeClass(o,e)},300),u.removeClass(t.body,\"stop-scrolling\"),e.onkeydown=a,e.previousActiveElement&&e.previousActiveElement.focus(),r=n,clearTimeout(o.timeout),!0},s.showInputError=l.showInputError=function(e){var t=d.getModal(),n=t.querySelector(\".sa-input-error\");u.addClass(n,\"show\");var o=t.querySelector(\".sa-error-container\");u.addClass(o,\"show\"),o.querySelector(\"p\").innerHTML=e,t.querySelector(\"input\").focus()},s.resetInputError=l.resetInputError=function(e){if(e&&13===e.keyCode)return!1;var t=d.getModal(),n=t.querySelector(\".sa-input-error\");u.removeClass(n,\"show\");var o=t.querySelector(\".sa-error-container\");u.removeClass(o,\"show\")},\"undefined\"!=typeof e?e.sweetAlert=e.swal=s:c.logStr(\"SweetAlert is a frontend module!\")},{\"./modules/default-params\":2,\"./modules/handle-click\":3,\"./modules/handle-dom\":4,\"./modules/handle-key\":5,\"./modules/handle-swal-dom\":6,\"./modules/set-params\":8,\"./modules/utils\":9}],2:[function(e,t,n){Object.defineProperty(n,\"__esModule\",{value:!0});var o={title:\"\",text:\"\",type:null,allowOutsideClick:!1,showConfirmButton:!0,showCancelButton:!1,closeOnConfirm:!0,closeOnCancel:!0,confirmButtonText:\"OK\",confirmButtonColor:\"#AEDEF4\",cancelButtonText:\"Cancel\",imageUrl:null,imageSize:null,timer:null,customClass:\"\",html:!1,animation:!0,allowEscapeKey:!0,inputType:\"text\",inputPlaceholder:\"\",inputValue:\"\"};n[\"default\"]=o,t.exports=n[\"default\"]},{}],3:[function(t,n,o){Object.defineProperty(o,\"__esModule\",{value:!0});var a=t(\"./utils\"),r=(t(\"./handle-swal-dom\"),t(\"./handle-dom\")),s=function(t,n,o){function s(e){m&&n.confirmButtonColor&&(p.style.backgroundColor=e)}var u,c,d,f=t||e.event,p=f.target||f.srcElement,m=-1!==p.className.indexOf(\"confirm\"),v=-1!==p.className.indexOf(\"sweet-overlay\"),y=r.hasClass(o,\"visible\"),h=n.doneFunction&&\"true\"===o.getAttribute(\"data-has-done-function\");switch(m&&n.confirmButtonColor&&(u=n.confirmButtonColor,c=a.colorLuminance(u,-.04),d=a.colorLuminance(u,-.14)),f.type){case\"mouseover\":s(c);break;case\"mouseout\":s(u);break;case\"mousedown\":s(d);break;case\"mouseup\":s(c);break;case\"focus\":var g=o.querySelector(\"button.confirm\"),b=o.querySelector(\"button.cancel\");m?b.style.boxShadow=\"none\":g.style.boxShadow=\"none\";break;case\"click\":var w=o===p,C=r.isDescendant(o,p);if(!w&&!C&&y&&!n.allowOutsideClick)break;m&&h&&y?l(o,n):h&&y||v?i(o,n):r.isDescendant(o,p)&&\"BUTTON\"===p.tagName&&sweetAlert.close()}},l=function(e,t){var n=!0;r.hasClass(e,\"show-input\")&&(n=e.querySelector(\"input\").value,n||(n=\"\")),t.doneFunction(n),t.closeOnConfirm&&sweetAlert.close()},i=function(e,t){var n=String(t.doneFunction).replace(/\\s/g,\"\"),o=\"function(\"===n.substring(0,9)&&\")\"!==n.substring(9,10);o&&t.doneFunction(!1),t.closeOnCancel&&sweetAlert.close()};o[\"default\"]={handleButton:s,handleConfirm:l,handleCancel:i},n.exports=o[\"default\"]},{\"./handle-dom\":4,\"./handle-swal-dom\":6,\"./utils\":9}],4:[function(n,o,a){Object.defineProperty(a,\"__esModule\",{value:!0});var r=function(e,t){return new RegExp(\" \"+t+\" \").test(\" \"+e.className+\" \")},s=function(e,t){r(e,t)||(e.className+=\" \"+t)},l=function(e,t){var n=\" \"+e.className.replace(/[\\t\\r\\n]/g,\" \")+\" \";if(r(e,t)){for(;n.indexOf(\" \"+t+\" \")>=0;)n=n.replace(\" \"+t+\" \",\" \");e.className=n.replace(/^\\s+|\\s+$/g,\"\")}},i=function(e){var n=t.createElement(\"div\");return n.appendChild(t.createTextNode(e)),n.innerHTML},u=function(e){e.style.opacity=\"\",e.style.display=\"block\"},c=function(e){if(e&&!e.length)return u(e);for(var t=0;t<e.length;++t)u(e[t])},d=function(e){e.style.opacity=\"\",e.style.display=\"none\"},f=function(e){if(e&&!e.length)return d(e);for(var t=0;t<e.length;++t)d(e[t])},p=function(e,t){for(var n=t.parentNode;null!==n;){if(n===e)return!0;n=n.parentNode}return!1},m=function(e){e.style.left=\"-9999px\",e.style.display=\"block\";var t,n=e.clientHeight;return t=\"undefined\"!=typeof getComputedStyle?parseInt(getComputedStyle(e).getPropertyValue(\"padding-top\"),10):parseInt(e.currentStyle.padding),e.style.left=\"\",e.style.display=\"none\",\"-\"+parseInt((n+t)/2)+\"px\"},v=function(e,t){if(+e.style.opacity<1){t=t||16,e.style.opacity=0,e.style.display=\"block\";var n=+new Date,o=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity+(new Date-n)/100,n=+new Date,+e.style.opacity<1&&setTimeout(o,t)});o()}e.style.display=\"block\"},y=function(e,t){t=t||16,e.style.opacity=1;var n=+new Date,o=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){e.style.opacity=+e.style.opacity-(new Date-n)/100,n=+new Date,+e.style.opacity>0?setTimeout(o,t):e.style.display=\"none\"});o()},h=function(n){if(\"function\"==typeof MouseEvent){var o=new MouseEvent(\"click\",{view:e,bubbles:!1,cancelable:!0});n.dispatchEvent(o)}else if(t.createEvent){var a=t.createEvent(\"MouseEvents\");a.initEvent(\"click\",!1,!1),n.dispatchEvent(a)}else t.createEventObject?n.fireEvent(\"onclick\"):\"function\"==typeof n.onclick&&n.onclick()},g=function(t){\"function\"==typeof t.stopPropagation?(t.stopPropagation(),t.preventDefault()):e.event&&e.event.hasOwnProperty(\"cancelBubble\")&&(e.event.cancelBubble=!0)};a.hasClass=r,a.addClass=s,a.removeClass=l,a.escapeHtml=i,a._show=u,a.show=c,a._hide=d,a.hide=f,a.isDescendant=p,a.getTopMargin=m,a.fadeIn=v,a.fadeOut=y,a.fireClick=h,a.stopEventPropagation=g},{}],5:[function(t,o,a){Object.defineProperty(a,\"__esModule\",{value:!0});var r=t(\"./handle-dom\"),s=t(\"./handle-swal-dom\"),l=function(t,o,a){var l=t||e.event,i=l.keyCode||l.which,u=a.querySelector(\"button.confirm\"),c=a.querySelector(\"button.cancel\"),d=a.querySelectorAll(\"button[tabindex]\");if(-1!==[9,13,32,27].indexOf(i)){for(var f=l.target||l.srcElement,p=-1,m=0;m<d.length;m++)if(f===d[m]){p=m;break}9===i?(f=-1===p?u:p===d.length-1?d[0]:d[p+1],r.stopEventPropagation(l),f.focus(),o.confirmButtonColor&&s.setFocusStyle(f,o.confirmButtonColor)):13===i?(\"INPUT\"===f.tagName&&(f=u,u.focus()),f=-1===p?u:n):27===i&&o.allowEscapeKey===!0?(f=c,r.fireClick(f,l)):f=n}};a[\"default\"]=l,o.exports=a[\"default\"]},{\"./handle-dom\":4,\"./handle-swal-dom\":6}],6:[function(n,o,a){var r=function(e){return e&&e.__esModule?e:{\"default\":e}};Object.defineProperty(a,\"__esModule\",{value:!0});var s=n(\"./utils\"),l=n(\"./handle-dom\"),i=n(\"./default-params\"),u=r(i),c=n(\"./injected-html\"),d=r(c),f=\".sweet-alert\",p=\".sweet-overlay\",m=function(){var e=t.createElement(\"div\");for(e.innerHTML=d[\"default\"];e.firstChild;)t.body.appendChild(e.firstChild)},v=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=t.querySelector(f);return e||(m(),e=v()),e}),y=function(){var e=v();return e?e.querySelector(\"input\"):void 0},h=function(){return t.querySelector(p)},g=function(e,t){var n=s.hexToRgb(t);e.style.boxShadow=\"0 0 2px rgba(\"+n+\", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)\"},b=function(n){var o=v();l.fadeIn(h(),10),l.show(o),l.addClass(o,\"showSweetAlert\"),l.removeClass(o,\"hideSweetAlert\"),e.previousActiveElement=t.activeElement;var a=o.querySelector(\"button.confirm\");a.focus(),setTimeout(function(){l.addClass(o,\"visible\")},500);var r=o.getAttribute(\"data-timer\");if(\"null\"!==r&&\"\"!==r){var s=n;o.timeout=setTimeout(function(){var e=(s||null)&&\"true\"===o.getAttribute(\"data-has-done-function\");e?s(null):sweetAlert.close()},r)}},w=function(){var e=v(),t=y();l.removeClass(e,\"show-input\"),t.value=u[\"default\"].inputValue,t.setAttribute(\"type\",u[\"default\"].inputType),t.setAttribute(\"placeholder\",u[\"default\"].inputPlaceholder),C()},C=function(e){if(e&&13===e.keyCode)return!1;var t=v(),n=t.querySelector(\".sa-input-error\");l.removeClass(n,\"show\");var o=t.querySelector(\".sa-error-container\");l.removeClass(o,\"show\")},S=function(){var e=v();e.style.marginTop=l.getTopMargin(v())};a.sweetAlertInitialize=m,a.getModal=v,a.getOverlay=h,a.getInput=y,a.setFocusStyle=g,a.openModal=b,a.resetInput=w,a.resetInputError=C,a.fixVerticalPosition=S},{\"./default-params\":2,\"./handle-dom\":4,\"./injected-html\":7,\"./utils\":9}],7:[function(e,t,n){Object.defineProperty(n,\"__esModule\",{value:!0});var o='<div class=\"sweet-overlay\" tabIndex=\"-1\"></div><div class=\"sweet-alert\"><div class=\"sa-icon sa-error\">\\n      <span class=\"sa-x-mark\">\\n        <span class=\"sa-line sa-left\"></span>\\n        <span class=\"sa-line sa-right\"></span>\\n      </span>\\n    </div><div class=\"sa-icon sa-warning\">\\n      <span class=\"sa-body\"></span>\\n      <span class=\"sa-dot\"></span>\\n    </div><div class=\"sa-icon sa-info\"></div><div class=\"sa-icon sa-success\">\\n      <span class=\"sa-line sa-tip\"></span>\\n      <span class=\"sa-line sa-long\"></span>\\n\\n      <div class=\"sa-placeholder\"></div>\\n      <div class=\"sa-fix\"></div>\\n    </div><div class=\"sa-icon sa-custom\"></div><h2>Title</h2>\\n    <p>Text</p>\\n    <fieldset>\\n      <input type=\"text\" tabIndex=\"3\" />\\n      <div class=\"sa-input-error\"></div>\\n    </fieldset><div class=\"sa-error-container\">\\n      <div class=\"icon\">!</div>\\n      <p>Not valid!</p>\\n    </div><div class=\"sa-button-container\">\\n      <button class=\"cancel\" tabIndex=\"2\">Cancel</button>\\n      <button class=\"confirm\" tabIndex=\"1\">OK</button>\\n    </div></div>';n[\"default\"]=o,t.exports=n[\"default\"]},{}],8:[function(e,t,o){Object.defineProperty(o,\"__esModule\",{value:!0});var a=e(\"./utils\"),r=e(\"./handle-swal-dom\"),s=e(\"./handle-dom\"),l=[\"error\",\"warning\",\"info\",\"success\",\"input\",\"prompt\"],i=function(e){var t=r.getModal(),o=t.querySelector(\"h2\"),i=t.querySelector(\"p\"),u=t.querySelector(\"button.cancel\"),c=t.querySelector(\"button.confirm\");if(o.innerHTML=e.html?e.title:s.escapeHtml(e.title).split(\"\\n\").join(\"<br>\"),i.innerHTML=e.html?e.text:s.escapeHtml(e.text||\"\").split(\"\\n\").join(\"<br>\"),e.text&&s.show(i),e.customClass)s.addClass(t,e.customClass),t.setAttribute(\"data-custom-class\",e.customClass);else{var d=t.getAttribute(\"data-custom-class\");s.removeClass(t,d),t.setAttribute(\"data-custom-class\",\"\")}if(s.hide(t.querySelectorAll(\".sa-icon\")),e.type&&!a.isIE8()){var f=function(){for(var o=!1,a=0;a<l.length;a++)if(e.type===l[a]){o=!0;break}if(!o)return logStr(\"Unknown alert type: \"+e.type),{v:!1};var i=[\"success\",\"error\",\"warning\",\"info\"],u=n;-1!==i.indexOf(e.type)&&(u=t.querySelector(\".sa-icon.sa-\"+e.type),s.show(u));var c=r.getInput();switch(e.type){case\"success\":s.addClass(u,\"animate\"),s.addClass(u.querySelector(\".sa-tip\"),\"animateSuccessTip\"),s.addClass(u.querySelector(\".sa-long\"),\"animateSuccessLong\");break;case\"error\":s.addClass(u,\"animateErrorIcon\"),s.addClass(u.querySelector(\".sa-x-mark\"),\"animateXMark\");break;case\"warning\":s.addClass(u,\"pulseWarning\"),s.addClass(u.querySelector(\".sa-body\"),\"pulseWarningIns\"),s.addClass(u.querySelector(\".sa-dot\"),\"pulseWarningIns\");break;case\"input\":case\"prompt\":c.setAttribute(\"type\",e.inputType),c.value=e.inputValue,c.setAttribute(\"placeholder\",e.inputPlaceholder),s.addClass(t,\"show-input\"),setTimeout(function(){c.focus(),c.addEventListener(\"keyup\",swal.resetInputError)},400)}}();if(\"object\"==typeof f)return f.v}if(e.imageUrl){var p=t.querySelector(\".sa-icon.sa-custom\");p.style.backgroundImage=\"url(\"+e.imageUrl+\")\",s.show(p);var m=80,v=80;if(e.imageSize){var y=e.imageSize.toString().split(\"x\"),h=y[0],g=y[1];h&&g?(m=h,v=g):logStr(\"Parameter imageSize expects value with format WIDTHxHEIGHT, got \"+e.imageSize)}p.setAttribute(\"style\",p.getAttribute(\"style\")+\"width:\"+m+\"px; height:\"+v+\"px\")}t.setAttribute(\"data-has-cancel-button\",e.showCancelButton),e.showCancelButton?u.style.display=\"inline-block\":s.hide(u),t.setAttribute(\"data-has-confirm-button\",e.showConfirmButton),e.showConfirmButton?c.style.display=\"inline-block\":s.hide(c),e.cancelButtonText&&(u.innerHTML=s.escapeHtml(e.cancelButtonText)),e.confirmButtonText&&(c.innerHTML=s.escapeHtml(e.confirmButtonText)),e.confirmButtonColor&&(c.style.backgroundColor=e.confirmButtonColor,r.setFocusStyle(c,e.confirmButtonColor)),t.setAttribute(\"data-allow-outside-click\",e.allowOutsideClick);var b=e.doneFunction?!0:!1;t.setAttribute(\"data-has-done-function\",b),e.animation?\"string\"==typeof e.animation?t.setAttribute(\"data-animation\",e.animation):t.setAttribute(\"data-animation\",\"pop\"):t.setAttribute(\"data-animation\",\"none\"),t.setAttribute(\"data-timer\",e.timer)};o[\"default\"]=i,t.exports=o[\"default\"]},{\"./handle-dom\":4,\"./handle-swal-dom\":6,\"./utils\":9}],9:[function(t,n,o){Object.defineProperty(o,\"__esModule\",{value:!0});var a=function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e},r=function(e){var t=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(e);return t?parseInt(t[1],16)+\", \"+parseInt(t[2],16)+\", \"+parseInt(t[3],16):null},s=function(){return e.attachEvent&&!e.addEventListener},l=function(t){e.console&&e.console.log(\"SweetAlert: \"+t)},i=function(e,t){e=String(e).replace(/[^0-9a-f]/gi,\"\"),e.length<6&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]),t=t||0;var n,o,a=\"#\";for(o=0;3>o;o++)n=parseInt(e.substr(2*o,2),16),n=Math.round(Math.min(Math.max(0,n+n*t),255)).toString(16),a+=(\"00\"+n).substr(n.length);return a};o.extend=a,o.hexToRgb=r,o.isIE8=s,o.logStr=l,o.colorLuminance=i},{}]},{},[1]),\"function\"==typeof define&&define.amd?define(function(){return sweetAlert}):\"undefined\"!=typeof module&&module.exports&&(module.exports=sweetAlert)}(window,document);","window.ParsleyConfig = {\r\n    errorClass: 'has-error',\r\n    successClass: 'has-success',\r\n    classHandler: function(ParsleyField) {\r\n        return ParsleyField.$element.parents('.form-group');\r\n    },\r\n    errorsContainer: function(ParsleyField) {\r\n        return ParsleyField.$element.parents('.form-group');\r\n    },\r\n    errorsWrapper: '<span class=\"help-block\">',\r\n    errorTemplate: '<div></div>'\r\n};\r\n","/*!\r\n* Parsley.js\r\n* Version 2.2.0 - built Mon, Jan 18th 2016, 5:46 pm\r\n* http://parsleyjs.org\r\n* Guillaume Potier - <guillaume@wisembly.com>\r\n* Marc-Andre Lafortune - <petroselinum@marc-andre.ca>\r\n* MIT Licensed\r\n*/\r\n\r\n// The source code below is generated by babel as\r\n// Parsley is written in ECMAScript 6\r\n//\r\nvar _slice = Array.prototype.slice;\r\n\r\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\r\n\r\n(function (global, factory) {\r\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) : typeof define === 'function' && define.amd ? define(['jquery'], factory) : global.parsley = factory(global.jQuery);\r\n})(this, function ($) {\r\n  'use strict';\r\n\r\n  var globalID = 1;\r\n  var pastWarnings = {};\r\n\r\n  var ParsleyUtils__ParsleyUtils = {\r\n    // Parsley DOM-API\r\n    // returns object from dom attributes and values\r\n    attr: function attr($element, namespace, obj) {\r\n      var i;\r\n      var attribute;\r\n      var attributes;\r\n      var regex = new RegExp('^' + namespace, 'i');\r\n\r\n      if ('undefined' === typeof obj) obj = {};else {\r\n        // Clear all own properties. This won't affect prototype's values\r\n        for (i in obj) {\r\n          if (obj.hasOwnProperty(i)) delete obj[i];\r\n        }\r\n      }\r\n\r\n      if ('undefined' === typeof $element || 'undefined' === typeof $element[0]) return obj;\r\n\r\n      attributes = $element[0].attributes;\r\n      for (i = attributes.length; i--;) {\r\n        attribute = attributes[i];\r\n\r\n        if (attribute && attribute.specified && regex.test(attribute.name)) {\r\n          obj[this.camelize(attribute.name.slice(namespace.length))] = this.deserializeValue(attribute.value);\r\n        }\r\n      }\r\n\r\n      return obj;\r\n    },\r\n\r\n    checkAttr: function checkAttr($element, namespace, _checkAttr) {\r\n      return $element.is('[' + namespace + _checkAttr + ']');\r\n    },\r\n\r\n    setAttr: function setAttr($element, namespace, attr, value) {\r\n      $element[0].setAttribute(this.dasherize(namespace + attr), String(value));\r\n    },\r\n\r\n    generateID: function generateID() {\r\n      return '' + globalID++;\r\n    },\r\n\r\n    /** Third party functions **/\r\n    // Zepto deserialize function\r\n    deserializeValue: function deserializeValue(value) {\r\n      var num;\r\n\r\n      try {\r\n        return value ? value == \"true\" || (value == \"false\" ? false : value == \"null\" ? null : !isNaN(num = Number(value)) ? num : /^[\\[\\{]/.test(value) ? $.parseJSON(value) : value) : value;\r\n      } catch (e) {\r\n        return value;\r\n      }\r\n    },\r\n\r\n    // Zepto camelize function\r\n    camelize: function camelize(str) {\r\n      return str.replace(/-+(.)?/g, function (match, chr) {\r\n        return chr ? chr.toUpperCase() : '';\r\n      });\r\n    },\r\n\r\n    // Zepto dasherize function\r\n    dasherize: function dasherize(str) {\r\n      return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();\r\n    },\r\n\r\n    warn: function warn() {\r\n      var _window$console;\r\n\r\n      if (window.console && 'function' === typeof window.console.warn) (_window$console = window.console).warn.apply(_window$console, arguments);\r\n    },\r\n\r\n    warnOnce: function warnOnce(msg) {\r\n      if (!pastWarnings[msg]) {\r\n        pastWarnings[msg] = true;\r\n        this.warn.apply(this, arguments);\r\n      }\r\n    },\r\n\r\n    _resetWarnings: function _resetWarnings() {\r\n      pastWarnings = {};\r\n    },\r\n\r\n    trimString: function trimString(string) {\r\n      return string.replace(/^\\s+|\\s+$/g, '');\r\n    },\r\n\r\n    // Object.create polyfill, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Polyfill\r\n    objectCreate: Object.create || (function () {\r\n      var Object = function Object() {};\r\n      return function (prototype) {\r\n        if (arguments.length > 1) {\r\n          throw Error('Second argument not supported');\r\n        }\r\n        if (typeof prototype != 'object') {\r\n          throw TypeError('Argument must be an object');\r\n        }\r\n        Object.prototype = prototype;\r\n        var result = new Object();\r\n        Object.prototype = null;\r\n        return result;\r\n      };\r\n    })()\r\n  };\r\n\r\n  var ParsleyUtils__default = ParsleyUtils__ParsleyUtils;\r\n\r\n  // All these options could be overriden and specified directly in DOM using\r\n  // `data-parsley-` default DOM-API\r\n  // eg: `inputs` can be set in DOM using `data-parsley-inputs=\"input, textarea\"`\r\n  // eg: `data-parsley-stop-on-first-failing-constraint=\"false\"`\r\n\r\n  var ParsleyDefaults = {\r\n    // ### General\r\n\r\n    // Default data-namespace for DOM API\r\n    namespace: 'data-parsley-',\r\n\r\n    // Supported inputs by default\r\n    inputs: 'input, textarea, select',\r\n\r\n    // Excluded inputs by default\r\n    excluded: 'input[type=button], input[type=submit], input[type=reset], input[type=hidden]',\r\n\r\n    // Stop validating field on highest priority failing constraint\r\n    priorityEnabled: true,\r\n\r\n    // ### Field only\r\n\r\n    // identifier used to group together inputs (e.g. radio buttons...)\r\n    multiple: null,\r\n\r\n    // identifier (or array of identifiers) used to validate only a select group of inputs\r\n    group: null,\r\n\r\n    // ### UI\r\n    // Enable\\Disable error messages\r\n    uiEnabled: true,\r\n\r\n    // Key events threshold before validation\r\n    validationThreshold: 3,\r\n\r\n    // Focused field on form validation error. 'first'|'last'|'none'\r\n    focus: 'first',\r\n\r\n    // `$.Event()` that will trigger validation. eg: `keyup`, `change`...\r\n    trigger: false,\r\n\r\n    // Class that would be added on every failing validation Parsley field\r\n    errorClass: 'parsley-error',\r\n\r\n    // Same for success validation\r\n    successClass: 'parsley-success',\r\n\r\n    // Return the `$element` that will receive these above success or error classes\r\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n    classHandler: function classHandler(ParsleyField) {},\r\n\r\n    // Return the `$element` where errors will be appended\r\n    // Could also be (and given directly from DOM) a valid selector like `'#div'`\r\n    errorsContainer: function errorsContainer(ParsleyField) {},\r\n\r\n    // ul elem that would receive errors' list\r\n    errorsWrapper: '<ul class=\"parsley-errors-list\"></ul>',\r\n\r\n    // li elem that would receive error message\r\n    errorTemplate: '<li></li>'\r\n  };\r\n\r\n  var ParsleyAbstract = function ParsleyAbstract() {};\r\n\r\n  ParsleyAbstract.prototype = {\r\n    asyncSupport: true, // Deprecated\r\n\r\n    actualizeOptions: function actualizeOptions() {\r\n      ParsleyUtils__default.attr(this.$element, this.options.namespace, this.domOptions);\r\n      if (this.parent && this.parent.actualizeOptions) this.parent.actualizeOptions();\r\n      return this;\r\n    },\r\n\r\n    _resetOptions: function _resetOptions(initOptions) {\r\n      this.domOptions = ParsleyUtils__default.objectCreate(this.parent.options);\r\n      this.options = ParsleyUtils__default.objectCreate(this.domOptions);\r\n      // Shallow copy of ownProperties of initOptions:\r\n      for (var i in initOptions) {\r\n        if (initOptions.hasOwnProperty(i)) this.options[i] = initOptions[i];\r\n      }\r\n      this.actualizeOptions();\r\n    },\r\n\r\n    _listeners: null,\r\n\r\n    // Register a callback for the given event name.\r\n    // Callback is called with context as the first argument and the `this`.\r\n    // The context is the current parsley instance, or window.Parsley if global.\r\n    // A return value of `false` will interrupt the calls\r\n    on: function on(name, fn) {\r\n      this._listeners = this._listeners || {};\r\n      var queue = this._listeners[name] = this._listeners[name] || [];\r\n      queue.push(fn);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `on` instead.\r\n    subscribe: function subscribe(name, fn) {\r\n      $.listenTo(this, name.toLowerCase(), fn);\r\n    },\r\n\r\n    // Unregister a callback (or all if none is given) for the given event name\r\n    off: function off(name, fn) {\r\n      var queue = this._listeners && this._listeners[name];\r\n      if (queue) {\r\n        if (!fn) {\r\n          delete this._listeners[name];\r\n        } else {\r\n          for (var i = queue.length; i--;) if (queue[i] === fn) queue.splice(i, 1);\r\n        }\r\n      }\r\n      return this;\r\n    },\r\n\r\n    // Deprecated. Use `off`\r\n    unsubscribe: function unsubscribe(name, fn) {\r\n      $.unsubscribeTo(this, name.toLowerCase());\r\n    },\r\n\r\n    // Trigger an event of the given name.\r\n    // A return value of `false` interrupts the callback chain.\r\n    // Returns false if execution was interrupted.\r\n    trigger: function trigger(name, target, extraArg) {\r\n      target = target || this;\r\n      var queue = this._listeners && this._listeners[name];\r\n      var result;\r\n      var parentResult;\r\n      if (queue) {\r\n        for (var i = queue.length; i--;) {\r\n          result = queue[i].call(target, target, extraArg);\r\n          if (result === false) return result;\r\n        }\r\n      }\r\n      if (this.parent) {\r\n        return this.parent.trigger(name, target, extraArg);\r\n      }\r\n      return true;\r\n    },\r\n\r\n    // Reset UI\r\n    reset: function reset() {\r\n      // Field case: just emit a reset event for UI\r\n      if ('ParsleyForm' !== this.__class__) return this._trigger('reset');\r\n\r\n      // Form case: emit a reset event for each field\r\n      for (var i = 0; i < this.fields.length; i++) this.fields[i]._trigger('reset');\r\n\r\n      this._trigger('reset');\r\n    },\r\n\r\n    // Destroy Parsley instance (+ UI)\r\n    destroy: function destroy() {\r\n      // Field case: emit destroy event to clean UI and then destroy stored instance\r\n      if ('ParsleyForm' !== this.__class__) {\r\n        this.$element.removeData('Parsley');\r\n        this.$element.removeData('ParsleyFieldMultiple');\r\n        this._trigger('destroy');\r\n\r\n        return;\r\n      }\r\n\r\n      // Form case: destroy all its fields and then destroy stored instance\r\n      for (var i = 0; i < this.fields.length; i++) this.fields[i].destroy();\r\n\r\n      this.$element.removeData('Parsley');\r\n      this._trigger('destroy');\r\n    },\r\n\r\n    asyncIsValid: function asyncIsValid(group, force) {\r\n      ParsleyUtils__default.warnOnce(\"asyncIsValid is deprecated; please use whenValid instead\");\r\n      return this.whenValid({ group: group, force: force });\r\n    },\r\n\r\n    _findRelated: function _findRelated() {\r\n      return this.options.multiple ? this.parent.$element.find('[' + this.options.namespace + 'multiple=\"' + this.options.multiple + '\"]') : this.$element;\r\n    }\r\n  };\r\n\r\n  var requirementConverters = {\r\n    string: function string(_string) {\r\n      return _string;\r\n    },\r\n    integer: function integer(string) {\r\n      if (isNaN(string)) throw 'Requirement is not an integer: \"' + string + '\"';\r\n      return parseInt(string, 10);\r\n    },\r\n    number: function number(string) {\r\n      if (isNaN(string)) throw 'Requirement is not a number: \"' + string + '\"';\r\n      return parseFloat(string);\r\n    },\r\n    reference: function reference(string) {\r\n      // Unused for now\r\n      var result = $(string);\r\n      if (result.length === 0) throw 'No such reference: \"' + string + '\"';\r\n      return result;\r\n    },\r\n    boolean: function boolean(string) {\r\n      return string !== 'false';\r\n    },\r\n    object: function object(string) {\r\n      return ParsleyUtils__default.deserializeValue(string);\r\n    },\r\n    regexp: function regexp(_regexp) {\r\n      var flags = '';\r\n\r\n      // Test if RegExp is literal, if not, nothing to be done, otherwise, we need to isolate flags and pattern\r\n      if (/^\\/.*\\/(?:[gimy]*)$/.test(_regexp)) {\r\n        // Replace the regexp literal string with the first match group: ([gimy]*)\r\n        // If no flag is present, this will be a blank string\r\n        flags = _regexp.replace(/.*\\/([gimy]*)$/, '$1');\r\n        // Again, replace the regexp literal string with the first match group:\r\n        // everything excluding the opening and closing slashes and the flags\r\n        _regexp = _regexp.replace(new RegExp('^/(.*?)/' + flags + '$'), '$1');\r\n      } else {\r\n        // Anchor regexp:\r\n        _regexp = '^' + _regexp + '$';\r\n      }\r\n      return new RegExp(_regexp, flags);\r\n    }\r\n  };\r\n\r\n  var convertArrayRequirement = function convertArrayRequirement(string, length) {\r\n    var m = string.match(/^\\s*\\[(.*)\\]\\s*$/);\r\n    if (!m) throw 'Requirement is not an array: \"' + string + '\"';\r\n    var values = m[1].split(',').map(ParsleyUtils__default.trimString);\r\n    if (values.length !== length) throw 'Requirement has ' + values.length + ' values when ' + length + ' are needed';\r\n    return values;\r\n  };\r\n\r\n  var convertRequirement = function convertRequirement(requirementType, string) {\r\n    var converter = requirementConverters[requirementType || 'string'];\r\n    if (!converter) throw 'Unknown requirement specification: \"' + requirementType + '\"';\r\n    return converter(string);\r\n  };\r\n\r\n  var convertExtraOptionRequirement = function convertExtraOptionRequirement(requirementSpec, string, extraOptionReader) {\r\n    var main = null;\r\n    var extra = {};\r\n    for (var key in requirementSpec) {\r\n      if (key) {\r\n        var value = extraOptionReader(key);\r\n        if ('string' === typeof value) value = convertRequirement(requirementSpec[key], value);\r\n        extra[key] = value;\r\n      } else {\r\n        main = convertRequirement(requirementSpec[key], string);\r\n      }\r\n    }\r\n    return [main, extra];\r\n  };\r\n\r\n  // A Validator needs to implement the methods `validate` and `parseRequirements`\r\n\r\n  var ParsleyValidator = function ParsleyValidator(spec) {\r\n    $.extend(true, this, spec);\r\n  };\r\n\r\n  ParsleyValidator.prototype = {\r\n    // Returns `true` iff the given `value` is valid according the given requirements.\r\n    validate: function validate(value, requirementFirstArg) {\r\n      if (this.fn) {\r\n        // Legacy style validator\r\n\r\n        if (arguments.length > 3) // If more args then value, requirement, instance...\r\n          requirementFirstArg = [].slice.call(arguments, 1, -1); // Skip first arg (value) and last (instance), combining the rest\r\n        return this.fn.call(this, value, requirementFirstArg);\r\n      }\r\n\r\n      if ($.isArray(value)) {\r\n        if (!this.validateMultiple) throw 'Validator `' + this.name + '` does not handle multiple values';\r\n        return this.validateMultiple.apply(this, arguments);\r\n      } else {\r\n        if (this.validateNumber) {\r\n          if (isNaN(value)) return false;\r\n          arguments[0] = parseFloat(arguments[0]);\r\n          return this.validateNumber.apply(this, arguments);\r\n        }\r\n        if (this.validateString) {\r\n          return this.validateString.apply(this, arguments);\r\n        }\r\n        throw 'Validator `' + this.name + '` only handles multiple values';\r\n      }\r\n    },\r\n\r\n    // Parses `requirements` into an array of arguments,\r\n    // according to `this.requirementType`\r\n    parseRequirements: function parseRequirements(requirements, extraOptionReader) {\r\n      if ('string' !== typeof requirements) {\r\n        // Assume requirement already parsed\r\n        // but make sure we return an array\r\n        return $.isArray(requirements) ? requirements : [requirements];\r\n      }\r\n      var type = this.requirementType;\r\n      if ($.isArray(type)) {\r\n        var values = convertArrayRequirement(requirements, type.length);\r\n        for (var i = 0; i < values.length; i++) values[i] = convertRequirement(type[i], values[i]);\r\n        return values;\r\n      } else if ($.isPlainObject(type)) {\r\n        return convertExtraOptionRequirement(type, requirements, extraOptionReader);\r\n      } else {\r\n        return [convertRequirement(type, requirements)];\r\n      }\r\n    },\r\n    // Defaults:\r\n    requirementType: 'string',\r\n\r\n    priority: 2\r\n\r\n  };\r\n\r\n  var ParsleyValidatorRegistry = function ParsleyValidatorRegistry(validators, catalog) {\r\n    this.__class__ = 'ParsleyValidatorRegistry';\r\n\r\n    // Default Parsley locale is en\r\n    this.locale = 'en';\r\n\r\n    this.init(validators || {}, catalog || {});\r\n  };\r\n\r\n  var typeRegexes = {\r\n    email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n\r\n    // Follow https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers\r\n    number: /^-?(\\d*\\.)?\\d+(e[-+]?\\d+)?$/i,\r\n\r\n    integer: /^-?\\d+$/,\r\n\r\n    digits: /^\\d+$/,\r\n\r\n    alphanum: /^\\w+$/i,\r\n\r\n    url: new RegExp(\"^\" +\r\n    // protocol identifier\r\n    \"(?:(?:https?|ftp)://)?\" + // ** mod: make scheme optional\r\n    // user:pass authentication\r\n    \"(?:\\\\S+(?::\\\\S*)?@)?\" + \"(?:\" +\r\n    // IP address exclusion\r\n    // private & local networks\r\n    // \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +   // ** mod: allow local networks\r\n    // \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n    // \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +  // ** mod: allow local networks\r\n    // IP address dotted notation octets\r\n    // excludes loopback network 0.0.0.0\r\n    // excludes reserved space >= 224.0.0.0\r\n    // excludes network & broacast addresses\r\n    // (first & last IP address of each class)\r\n    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" + \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" + \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" + \"|\" +\r\n    // host name\r\n    '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)' +\r\n    // domain name\r\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*' +\r\n    // TLD identifier\r\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))' + \")\" +\r\n    // port number\r\n    \"(?::\\\\d{2,5})?\" +\r\n    // resource path\r\n    \"(?:/\\\\S*)?\" + \"$\", 'i')\r\n  };\r\n  typeRegexes.range = typeRegexes.number;\r\n\r\n  // See http://stackoverflow.com/a/10454560/8279\r\n  var decimalPlaces = function decimalPlaces(num) {\r\n    var match = ('' + num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n    if (!match) {\r\n      return 0;\r\n    }\r\n    return Math.max(0,\r\n    // Number of digits right of decimal point.\r\n    (match[1] ? match[1].length : 0) - (\r\n    // Adjust for scientific notation.\r\n    match[2] ? +match[2] : 0));\r\n  };\r\n\r\n  ParsleyValidatorRegistry.prototype = {\r\n    init: function init(validators, catalog) {\r\n      this.catalog = catalog;\r\n      // Copy prototype's validators:\r\n      this.validators = $.extend({}, this.validators);\r\n\r\n      for (var name in validators) this.addValidator(name, validators[name].fn, validators[name].priority);\r\n\r\n      window.Parsley.trigger('parsley:validator:init');\r\n    },\r\n\r\n    // Set new messages locale if we have dictionary loaded in ParsleyConfig.i18n\r\n    setLocale: function setLocale(locale) {\r\n      if ('undefined' === typeof this.catalog[locale]) throw new Error(locale + ' is not available in the catalog');\r\n\r\n      this.locale = locale;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new messages catalog for a given locale. Set locale for this catalog if set === `true`\r\n    addCatalog: function addCatalog(locale, messages, set) {\r\n      if ('object' === typeof messages) this.catalog[locale] = messages;\r\n\r\n      if (true === set) return this.setLocale(locale);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a specific message for a given constraint in a given locale\r\n    addMessage: function addMessage(locale, name, message) {\r\n      if ('undefined' === typeof this.catalog[locale]) this.catalog[locale] = {};\r\n\r\n      this.catalog[locale][name] = message;\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add messages for a given locale\r\n    addMessages: function addMessages(locale, nameMessageObject) {\r\n      for (var name in nameMessageObject) this.addMessage(locale, name, nameMessageObject[name]);\r\n\r\n      return this;\r\n    },\r\n\r\n    // Add a new validator\r\n    //\r\n    //    addValidator('custom', {\r\n    //        requirementType: ['integer', 'integer'],\r\n    //        validateString: function(value, from, to) {},\r\n    //        priority: 22,\r\n    //        messages: {\r\n    //          en: \"Hey, that's no good\",\r\n    //          fr: \"Aye aye, pas bon du tout\",\r\n    //        }\r\n    //    })\r\n    //\r\n    // Old API was addValidator(name, function, priority)\r\n    //\r\n    addValidator: function addValidator(name, arg1, arg2) {\r\n      if (this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is already defined.');else if (ParsleyDefaults.hasOwnProperty(name)) {\r\n        ParsleyUtils__default.warn('\"' + name + '\" is a restricted keyword and is not a valid validator name.');\r\n        return;\r\n      }\r\n      return this._setValidator.apply(this, arguments);\r\n    },\r\n\r\n    updateValidator: function updateValidator(name, arg1, arg2) {\r\n      if (!this.validators[name]) {\r\n        ParsleyUtils__default.warn('Validator \"' + name + '\" is not already defined.');\r\n        return this.addValidator.apply(this, arguments);\r\n      }\r\n      return this._setValidator(this, arguments);\r\n    },\r\n\r\n    removeValidator: function removeValidator(name) {\r\n      if (!this.validators[name]) ParsleyUtils__default.warn('Validator \"' + name + '\" is not defined.');\r\n\r\n      delete this.validators[name];\r\n\r\n      return this;\r\n    },\r\n\r\n    _setValidator: function _setValidator(name, validator, priority) {\r\n      if ('object' !== typeof validator) {\r\n        // Old style validator, with `fn` and `priority`\r\n        validator = {\r\n          fn: validator,\r\n          priority: priority\r\n        };\r\n      }\r\n      if (!validator.validate) {\r\n        validator = new ParsleyValidator(validator);\r\n      }\r\n      this.validators[name] = validator;\r\n\r\n      for (var locale in validator.messages || {}) this.addMessage(locale, name, validator.messages[locale]);\r\n\r\n      return this;\r\n    },\r\n\r\n    getErrorMessage: function getErrorMessage(constraint) {\r\n      var message;\r\n\r\n      // Type constraints are a bit different, we have to match their requirements too to find right error message\r\n      if ('type' === constraint.name) {\r\n        var typeMessages = this.catalog[this.locale][constraint.name] || {};\r\n        message = typeMessages[constraint.requirements];\r\n      } else message = this.formatMessage(this.catalog[this.locale][constraint.name], constraint.requirements);\r\n\r\n      return message || this.catalog[this.locale].defaultMessage || this.catalog.en.defaultMessage;\r\n    },\r\n\r\n    // Kind of light `sprintf()` implementation\r\n    formatMessage: function formatMessage(string, parameters) {\r\n      if ('object' === typeof parameters) {\r\n        for (var i in parameters) string = this.formatMessage(string, parameters[i]);\r\n\r\n        return string;\r\n      }\r\n\r\n      return 'string' === typeof string ? string.replace(/%s/i, parameters) : '';\r\n    },\r\n\r\n    // Here is the Parsley default validators list.\r\n    // A validator is an object with the following key values:\r\n    //  - priority: an integer\r\n    //  - requirement: 'string' (default), 'integer', 'number', 'regexp' or an Array of these\r\n    //  - validateString, validateMultiple, validateNumber: functions returning `true`, `false` or a promise\r\n    // Alternatively, a validator can be a function that returns such an object\r\n    //\r\n    validators: {\r\n      notblank: {\r\n        validateString: function validateString(value) {\r\n          return (/\\S/.test(value)\r\n          );\r\n        },\r\n        priority: 2\r\n      },\r\n      required: {\r\n        validateMultiple: function validateMultiple(values) {\r\n          return values.length > 0;\r\n        },\r\n        validateString: function validateString(value) {\r\n          return (/\\S/.test(value)\r\n          );\r\n        },\r\n        priority: 512\r\n      },\r\n      type: {\r\n        validateString: function validateString(value, type) {\r\n          var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\r\n\r\n          var _ref$step = _ref.step;\r\n          var step = _ref$step === undefined ? '1' : _ref$step;\r\n          var _ref$base = _ref.base;\r\n          var base = _ref$base === undefined ? 0 : _ref$base;\r\n\r\n          var regex = typeRegexes[type];\r\n          if (!regex) {\r\n            throw new Error('validator type `' + type + '` is not supported');\r\n          }\r\n          if (!regex.test(value)) return false;\r\n          if ('number' === type) {\r\n            if (!/^any$/i.test(step || '')) {\r\n              var nb = Number(value);\r\n              // Be careful of rounding errors by using integers.\r\n              var mul = Math.pow(10, Math.max(decimalPlaces(step), decimalPlaces(base)));\r\n              if ((nb * mul - base * mul) % (step * mul) != 0) return false;\r\n            }\r\n          }\r\n          return true;\r\n        },\r\n        requirementType: {\r\n          '': 'string',\r\n          step: 'string',\r\n          base: 'number'\r\n        },\r\n        priority: 256\r\n      },\r\n      pattern: {\r\n        validateString: function validateString(value, regexp) {\r\n          return regexp.test(value);\r\n        },\r\n        requirementType: 'regexp',\r\n        priority: 64\r\n      },\r\n      minlength: {\r\n        validateString: function validateString(value, requirement) {\r\n          return value.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxlength: {\r\n        validateString: function validateString(value, requirement) {\r\n          return value.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      length: {\r\n        validateString: function validateString(value, min, max) {\r\n          return value.length >= min && value.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      mincheck: {\r\n        validateMultiple: function validateMultiple(values, requirement) {\r\n          return values.length >= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      maxcheck: {\r\n        validateMultiple: function validateMultiple(values, requirement) {\r\n          return values.length <= requirement;\r\n        },\r\n        requirementType: 'integer',\r\n        priority: 30\r\n      },\r\n      check: {\r\n        validateMultiple: function validateMultiple(values, min, max) {\r\n          return values.length >= min && values.length <= max;\r\n        },\r\n        requirementType: ['integer', 'integer'],\r\n        priority: 30\r\n      },\r\n      min: {\r\n        validateNumber: function validateNumber(value, requirement) {\r\n          return value >= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      max: {\r\n        validateNumber: function validateNumber(value, requirement) {\r\n          return value <= requirement;\r\n        },\r\n        requirementType: 'number',\r\n        priority: 30\r\n      },\r\n      range: {\r\n        validateNumber: function validateNumber(value, min, max) {\r\n          return value >= min && value <= max;\r\n        },\r\n        requirementType: ['number', 'number'],\r\n        priority: 30\r\n      },\r\n      equalto: {\r\n        validateString: function validateString(value, refOrValue) {\r\n          var $reference = $(refOrValue);\r\n          if ($reference.length) return value === $reference.val();else return value === refOrValue;\r\n        },\r\n        priority: 256\r\n      }\r\n    }\r\n  };\r\n\r\n  var ParsleyUI = function ParsleyUI(options) {\r\n    this.__class__ = 'ParsleyUI';\r\n  };\r\n\r\n  ParsleyUI.prototype = {\r\n    listen: function listen() {\r\n      var _this = this;\r\n\r\n      window.Parsley.on('form:init', function (form) {\r\n        _this.setupForm(form);\r\n      }).on('field:init', function (field) {\r\n        _this.setupField(field);\r\n      }).on('field:validated', function (field) {\r\n        _this.reflow(field);\r\n      }).on('form:validated', function (form) {\r\n        _this.focus(form);\r\n      }).on('field:reset', function (field) {\r\n        _this.reset(field);\r\n      }).on('form:destroy', function (form) {\r\n        _this.destroy(form);\r\n      }).on('field:destroy', function (field) {\r\n        _this.destroy(field);\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    reflow: function reflow(fieldInstance) {\r\n      // If this field has not an active UI (case for multiples) don't bother doing something\r\n      if ('undefined' === typeof fieldInstance._ui || false === fieldInstance._ui.active) return;\r\n\r\n      // Diff between two validation results\r\n      var diff = this._diff(fieldInstance.validationResult, fieldInstance._ui.lastValidationResult);\r\n\r\n      // Then store current validation result for next reflow\r\n      fieldInstance._ui.lastValidationResult = fieldInstance.validationResult;\r\n\r\n      // Handle valid / invalid / none field class\r\n      this.manageStatusClass(fieldInstance);\r\n\r\n      // Add, remove, updated errors messages\r\n      this.manageErrorsMessages(fieldInstance, diff);\r\n\r\n      // Triggers impl\r\n      this.actualizeTriggers(fieldInstance);\r\n\r\n      // If field is not valid for the first time, bind keyup trigger to ease UX and quickly inform user\r\n      if ((diff.kept.length || diff.added.length) && true !== fieldInstance._ui.failedOnce) this.manageFailingFieldTrigger(fieldInstance);\r\n    },\r\n\r\n    // Returns an array of field's error message(s)\r\n    getErrorsMessages: function getErrorsMessages(fieldInstance) {\r\n      // No error message, field is valid\r\n      if (true === fieldInstance.validationResult) return [];\r\n\r\n      var messages = [];\r\n\r\n      for (var i = 0; i < fieldInstance.validationResult.length; i++) messages.push(fieldInstance.validationResult[i].errorMessage || this._getErrorMessage(fieldInstance, fieldInstance.validationResult[i].assert));\r\n\r\n      return messages;\r\n    },\r\n\r\n    manageStatusClass: function manageStatusClass(fieldInstance) {\r\n      if (fieldInstance.hasConstraints() && fieldInstance.needsValidation() && true === fieldInstance.validationResult) this._successClass(fieldInstance);else if (fieldInstance.validationResult.length > 0) this._errorClass(fieldInstance);else this._resetClass(fieldInstance);\r\n    },\r\n\r\n    manageErrorsMessages: function manageErrorsMessages(fieldInstance, diff) {\r\n      if ('undefined' !== typeof fieldInstance.options.errorsMessagesDisabled) return;\r\n\r\n      // Case where we have errorMessage option that configure an unique field error message, regardless failing validators\r\n      if ('undefined' !== typeof fieldInstance.options.errorMessage) {\r\n        if (diff.added.length || diff.kept.length) {\r\n          this._insertErrorWrapper(fieldInstance);\r\n\r\n          if (0 === fieldInstance._ui.$errorsWrapper.find('.parsley-custom-error-message').length) fieldInstance._ui.$errorsWrapper.append($(fieldInstance.options.errorTemplate).addClass('parsley-custom-error-message'));\r\n\r\n          return fieldInstance._ui.$errorsWrapper.addClass('filled').find('.parsley-custom-error-message').html(fieldInstance.options.errorMessage);\r\n        }\r\n\r\n        return fieldInstance._ui.$errorsWrapper.removeClass('filled').find('.parsley-custom-error-message').remove();\r\n      }\r\n\r\n      // Show, hide, update failing constraints messages\r\n      for (var i = 0; i < diff.removed.length; i++) this.removeError(fieldInstance, diff.removed[i].assert.name, true);\r\n\r\n      for (i = 0; i < diff.added.length; i++) this.addError(fieldInstance, diff.added[i].assert.name, diff.added[i].errorMessage, diff.added[i].assert, true);\r\n\r\n      for (i = 0; i < diff.kept.length; i++) this.updateError(fieldInstance, diff.kept[i].assert.name, diff.kept[i].errorMessage, diff.kept[i].assert, true);\r\n    },\r\n\r\n    // TODO: strange API here, intuitive for manual usage with addError(pslyInstance, 'foo', 'bar')\r\n    // but a little bit complex for above internal usage, with forced undefined parameter...\r\n    addError: function addError(fieldInstance, name, message, assert, doNotUpdateClass) {\r\n      this._insertErrorWrapper(fieldInstance);\r\n      fieldInstance._ui.$errorsWrapper.addClass('filled').append($(fieldInstance.options.errorTemplate).addClass('parsley-' + name).html(message || this._getErrorMessage(fieldInstance, assert)));\r\n\r\n      if (true !== doNotUpdateClass) this._errorClass(fieldInstance);\r\n    },\r\n\r\n    // Same as above\r\n    updateError: function updateError(fieldInstance, name, message, assert, doNotUpdateClass) {\r\n      fieldInstance._ui.$errorsWrapper.addClass('filled').find('.parsley-' + name).html(message || this._getErrorMessage(fieldInstance, assert));\r\n\r\n      if (true !== doNotUpdateClass) this._errorClass(fieldInstance);\r\n    },\r\n\r\n    // Same as above twice\r\n    removeError: function removeError(fieldInstance, name, doNotUpdateClass) {\r\n      fieldInstance._ui.$errorsWrapper.removeClass('filled').find('.parsley-' + name).remove();\r\n\r\n      // edge case possible here: remove a standard Parsley error that is still failing in fieldInstance.validationResult\r\n      // but highly improbable cuz' manually removing a well Parsley handled error makes no sense.\r\n      if (true !== doNotUpdateClass) this.manageStatusClass(fieldInstance);\r\n    },\r\n\r\n    focus: function focus(formInstance) {\r\n      formInstance._focusedField = null;\r\n\r\n      if (true === formInstance.validationResult || 'none' === formInstance.options.focus) return null;\r\n\r\n      for (var i = 0; i < formInstance.fields.length; i++) {\r\n        var field = formInstance.fields[i];\r\n        if (true !== field.validationResult && field.validationResult.length > 0 && 'undefined' === typeof field.options.noFocus) {\r\n          formInstance._focusedField = field.$element;\r\n          if ('first' === formInstance.options.focus) break;\r\n        }\r\n      }\r\n\r\n      if (null === formInstance._focusedField) return null;\r\n\r\n      return formInstance._focusedField.focus();\r\n    },\r\n\r\n    _getErrorMessage: function _getErrorMessage(fieldInstance, constraint) {\r\n      var customConstraintErrorMessage = constraint.name + 'Message';\r\n\r\n      if ('undefined' !== typeof fieldInstance.options[customConstraintErrorMessage]) return window.Parsley.formatMessage(fieldInstance.options[customConstraintErrorMessage], constraint.requirements);\r\n\r\n      return window.Parsley.getErrorMessage(constraint);\r\n    },\r\n\r\n    _diff: function _diff(newResult, oldResult, deep) {\r\n      var added = [];\r\n      var kept = [];\r\n\r\n      for (var i = 0; i < newResult.length; i++) {\r\n        var found = false;\r\n\r\n        for (var j = 0; j < oldResult.length; j++) if (newResult[i].assert.name === oldResult[j].assert.name) {\r\n          found = true;\r\n          break;\r\n        }\r\n\r\n        if (found) kept.push(newResult[i]);else added.push(newResult[i]);\r\n      }\r\n\r\n      return {\r\n        kept: kept,\r\n        added: added,\r\n        removed: !deep ? this._diff(oldResult, newResult, true).added : []\r\n      };\r\n    },\r\n\r\n    setupForm: function setupForm(formInstance) {\r\n      formInstance.$element.on('submit.Parsley', function (evt) {\r\n        formInstance.onSubmitValidate(evt);\r\n      });\r\n      formInstance.$element.on('click.Parsley', 'input[type=\"submit\"], button[type=\"submit\"]', function (evt) {\r\n        formInstance.onSubmitButton(evt);\r\n      });\r\n\r\n      // UI could be disabled\r\n      if (false === formInstance.options.uiEnabled) return;\r\n\r\n      formInstance.$element.attr('novalidate', '');\r\n    },\r\n\r\n    setupField: function setupField(fieldInstance) {\r\n      var _ui = { active: false };\r\n\r\n      // UI could be disabled\r\n      if (false === fieldInstance.options.uiEnabled) return;\r\n\r\n      _ui.active = true;\r\n\r\n      // Give field its Parsley id in DOM\r\n      fieldInstance.$element.attr(fieldInstance.options.namespace + 'id', fieldInstance.__id__);\r\n\r\n      /** Generate important UI elements and store them in fieldInstance **/\r\n      // $errorClassHandler is the $element that woul have parsley-error and parsley-success classes\r\n      _ui.$errorClassHandler = this._manageClassHandler(fieldInstance);\r\n\r\n      // $errorsWrapper is a div that would contain the various field errors, it will be appended into $errorsContainer\r\n      _ui.errorsWrapperId = 'parsley-id-' + (fieldInstance.options.multiple ? 'multiple-' + fieldInstance.options.multiple : fieldInstance.__id__);\r\n      _ui.$errorsWrapper = $(fieldInstance.options.errorsWrapper).attr('id', _ui.errorsWrapperId);\r\n\r\n      // ValidationResult UI storage to detect what have changed bwt two validations, and update DOM accordingly\r\n      _ui.lastValidationResult = [];\r\n      _ui.validationInformationVisible = false;\r\n\r\n      // Store it in fieldInstance for later\r\n      fieldInstance._ui = _ui;\r\n\r\n      // Bind triggers first time\r\n      this.actualizeTriggers(fieldInstance);\r\n    },\r\n\r\n    // Determine which element will have `parsley-error` and `parsley-success` classes\r\n    _manageClassHandler: function _manageClassHandler(fieldInstance) {\r\n      // An element selector could be passed through DOM with `data-parsley-class-handler=#foo`\r\n      if ('string' === typeof fieldInstance.options.classHandler && $(fieldInstance.options.classHandler).length) return $(fieldInstance.options.classHandler);\r\n\r\n      // Class handled could also be determined by function given in Parsley options\r\n      var $handler = fieldInstance.options.classHandler(fieldInstance);\r\n\r\n      // If this function returned a valid existing DOM element, go for it\r\n      if ('undefined' !== typeof $handler && $handler.length) return $handler;\r\n\r\n      // Otherwise, if simple element (input, texatrea, select...) it will perfectly host the classes\r\n      if (!fieldInstance.options.multiple || fieldInstance.$element.is('select')) return fieldInstance.$element;\r\n\r\n      // But if multiple element (radio, checkbox), that would be their parent\r\n      return fieldInstance.$element.parent();\r\n    },\r\n\r\n    _insertErrorWrapper: function _insertErrorWrapper(fieldInstance) {\r\n      var $errorsContainer;\r\n\r\n      // Nothing to do if already inserted\r\n      if (0 !== fieldInstance._ui.$errorsWrapper.parent().length) return fieldInstance._ui.$errorsWrapper.parent();\r\n\r\n      if ('string' === typeof fieldInstance.options.errorsContainer) {\r\n        if ($(fieldInstance.options.errorsContainer).length) return $(fieldInstance.options.errorsContainer).append(fieldInstance._ui.$errorsWrapper);else ParsleyUtils__default.warn('The errors container `' + fieldInstance.options.errorsContainer + '` does not exist in DOM');\r\n      } else if ('function' === typeof fieldInstance.options.errorsContainer) $errorsContainer = fieldInstance.options.errorsContainer(fieldInstance);\r\n\r\n      if ('undefined' !== typeof $errorsContainer && $errorsContainer.length) return $errorsContainer.append(fieldInstance._ui.$errorsWrapper);\r\n\r\n      var $from = fieldInstance.$element;\r\n      if (fieldInstance.options.multiple) $from = $from.parent();\r\n      return $from.after(fieldInstance._ui.$errorsWrapper);\r\n    },\r\n\r\n    actualizeTriggers: function actualizeTriggers(fieldInstance) {\r\n      var _this2 = this;\r\n\r\n      var $toBind = fieldInstance._findRelated();\r\n\r\n      // Remove Parsley events already binded on this field\r\n      $toBind.off('.Parsley');\r\n\r\n      // If no trigger is set, all good\r\n      if (false === fieldInstance.options.trigger) return;\r\n\r\n      var triggers = fieldInstance.options.trigger.replace(/^\\s+/g, '').replace(/\\s+$/g, '');\r\n\r\n      if ('' === triggers) return;\r\n\r\n      $toBind.on(triggers.split(' ').join('.Parsley ') + '.Parsley', function (event) {\r\n        _this2.eventValidate(fieldInstance, event);\r\n      });\r\n    },\r\n\r\n    eventValidate: function eventValidate(field, event) {\r\n      // For keyup, keypress, keydown... events that could be a little bit obstrusive\r\n      // do not validate if val length < min threshold on first validation. Once field have been validated once and info\r\n      // about success or failure have been displayed, always validate with this trigger to reflect every yalidation change.\r\n      if (/key/.test(event.type)) if (!field._ui.validationInformationVisible && field.getValue().length <= field.options.validationThreshold) return;\r\n\r\n      field.validate();\r\n    },\r\n\r\n    manageFailingFieldTrigger: function manageFailingFieldTrigger(fieldInstance) {\r\n      fieldInstance._ui.failedOnce = true;\r\n\r\n      // Radio and checkboxes fields must bind every field multiple\r\n      if (fieldInstance.options.multiple) fieldInstance._findRelated().each(function () {\r\n        if (!/change/i.test($(this).parsley().options.trigger || '')) $(this).on('change.ParsleyFailedOnce', function () {\r\n          fieldInstance.validate();\r\n        });\r\n      });\r\n\r\n      // Select case\r\n      if (fieldInstance.$element.is('select')) if (!/change/i.test(fieldInstance.options.trigger || '')) return fieldInstance.$element.on('change.ParsleyFailedOnce', function () {\r\n        fieldInstance.validate();\r\n      });\r\n\r\n      // All other inputs fields\r\n      if (!/keyup/i.test(fieldInstance.options.trigger || '')) return fieldInstance.$element.on('keyup.ParsleyFailedOnce', function () {\r\n        fieldInstance.validate();\r\n      });\r\n    },\r\n\r\n    reset: function reset(parsleyInstance) {\r\n      // Reset all event listeners\r\n      this.actualizeTriggers(parsleyInstance);\r\n      parsleyInstance.$element.off('.ParsleyFailedOnce');\r\n\r\n      // Nothing to do if UI never initialized for this field\r\n      if ('undefined' === typeof parsleyInstance._ui) return;\r\n\r\n      if ('ParsleyForm' === parsleyInstance.__class__) return;\r\n\r\n      // Reset all errors' li\r\n      parsleyInstance._ui.$errorsWrapper.removeClass('filled').children().remove();\r\n\r\n      // Reset validation class\r\n      this._resetClass(parsleyInstance);\r\n\r\n      // Reset validation flags and last validation result\r\n      parsleyInstance._ui.lastValidationResult = [];\r\n      parsleyInstance._ui.validationInformationVisible = false;\r\n      parsleyInstance._ui.failedOnce = false;\r\n    },\r\n\r\n    destroy: function destroy(parsleyInstance) {\r\n      this.reset(parsleyInstance);\r\n\r\n      if ('ParsleyForm' === parsleyInstance.__class__) return;\r\n\r\n      if ('undefined' !== typeof parsleyInstance._ui) parsleyInstance._ui.$errorsWrapper.remove();\r\n\r\n      delete parsleyInstance._ui;\r\n    },\r\n\r\n    _successClass: function _successClass(fieldInstance) {\r\n      fieldInstance._ui.validationInformationVisible = true;\r\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.errorClass).addClass(fieldInstance.options.successClass);\r\n    },\r\n    _errorClass: function _errorClass(fieldInstance) {\r\n      fieldInstance._ui.validationInformationVisible = true;\r\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).addClass(fieldInstance.options.errorClass);\r\n    },\r\n    _resetClass: function _resetClass(fieldInstance) {\r\n      fieldInstance._ui.$errorClassHandler.removeClass(fieldInstance.options.successClass).removeClass(fieldInstance.options.errorClass);\r\n    }\r\n  };\r\n\r\n  var ParsleyForm = function ParsleyForm(element, domOptions, options) {\r\n    this.__class__ = 'ParsleyForm';\r\n    this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n    this.$element = $(element);\r\n    this.domOptions = domOptions;\r\n    this.options = options;\r\n    this.parent = window.Parsley;\r\n\r\n    this.fields = [];\r\n    this.validationResult = null;\r\n  };\r\n\r\n  var ParsleyForm__statusMapping = { pending: null, resolved: true, rejected: false };\r\n\r\n  ParsleyForm.prototype = {\r\n    onSubmitValidate: function onSubmitValidate(event) {\r\n      var _this3 = this;\r\n\r\n      // This is a Parsley generated submit event, do not validate, do not prevent, simply exit and keep normal behavior\r\n      if (true === event.parsley) return;\r\n\r\n      // If we didn't come here through a submit button, use the first one in the form\r\n      this._$submitSource = this._$submitSource || this.$element.find('input[type=\"submit\"], button[type=\"submit\"]').first();\r\n\r\n      if (this._$submitSource.is('[formnovalidate]')) {\r\n        this._$submitSource = null;\r\n        return;\r\n      }\r\n\r\n      // Because some validations might be asynchroneous,\r\n      // we cancel this submit and will fake it after validation.\r\n      event.stopImmediatePropagation();\r\n      event.preventDefault();\r\n\r\n      this.whenValidate({ event: event }).done(function () {\r\n        _this3._submit();\r\n      }).always(function () {\r\n        _this3._$submitSource = null;\r\n      });\r\n\r\n      return this;\r\n    },\r\n\r\n    onSubmitButton: function onSubmitButton(event) {\r\n      this._$submitSource = $(event.target);\r\n    },\r\n    // internal\r\n    // _submit submits the form, this time without going through the validations.\r\n    // Care must be taken to \"fake\" the actual submit button being clicked.\r\n    _submit: function _submit() {\r\n      if (false === this._trigger('submit')) return;\r\n      this.$element.find('.parsley_synthetic_submit_button').remove();\r\n      // Add submit button's data\r\n      if (this._$submitSource) {\r\n        $('<input class=\"parsley_synthetic_submit_button\" type=\"hidden\">').attr('name', this._$submitSource.attr('name')).attr('value', this._$submitSource.attr('value')).appendTo(this.$element);\r\n      }\r\n      //\r\n      this.$element.trigger($.extend($.Event('submit'), { parsley: true }));\r\n    },\r\n\r\n    // Performs validation on fields while triggering events.\r\n    // @returns `true` if all validations succeeds, `false`\r\n    // if a failure is immediately detected, or `null`\r\n    // if dependant on a promise.\r\n    // Consider using `whenValidate` instead.\r\n    validate: function validate(options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley form without passing arguments as an object is deprecated.');\r\n\r\n        var _arguments = _slice.call(arguments);\r\n\r\n        var group = _arguments[0];\r\n        var force = _arguments[1];\r\n        var event = _arguments[2];\r\n\r\n        options = { group: group, force: force, event: event };\r\n      }\r\n      return ParsleyForm__statusMapping[this.whenValidate(options).state()];\r\n    },\r\n\r\n    whenValidate: function whenValidate() {\r\n      var _this4 = this;\r\n\r\n      var _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n      var group = _ref2.group;\r\n      var force = _ref2.force;\r\n      var event = _ref2.event;\r\n\r\n      this.submitEvent = event;\r\n      if (event) {\r\n        this.submitEvent.preventDefault = function () {\r\n          ParsleyUtils__default.warnOnce(\"Using `this.submitEvent.preventDefault()` is deprecated; instead, call `this.validationResult = false`\");\r\n          _this4.validationResult = false;\r\n        };\r\n      }\r\n      this.validationResult = true;\r\n\r\n      // fire validate event to eventually modify things before very validation\r\n      this._trigger('validate');\r\n\r\n      // Refresh form DOM options and form's fields that could have changed\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(function () {\r\n        return $.map(_this4.fields, function (field) {\r\n          return field.whenValidate({ force: force, group: group });\r\n        });\r\n      });\r\n\r\n      var promiseBasedOnValidationResult = function promiseBasedOnValidationResult() {\r\n        var r = $.Deferred();\r\n        if (false === _this4.validationResult) r.reject();\r\n        return r.resolve().promise();\r\n      };\r\n\r\n      return $.when.apply($, _toConsumableArray(promises)).done(function () {\r\n        _this4._trigger('success');\r\n      }).fail(function () {\r\n        _this4.validationResult = false;_this4._trigger('error');\r\n      }).always(function () {\r\n        _this4._trigger('validated');\r\n      }).pipe(promiseBasedOnValidationResult, promiseBasedOnValidationResult);\r\n    },\r\n\r\n    // Iterate over refreshed fields, and stop on first failure.\r\n    // Returns `true` if all fields are valid, `false` if a failure is detected\r\n    // or `null` if the result depends on an unresolved promise.\r\n    // Prefer using `whenValid` instead.\r\n    isValid: function isValid(options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley form without passing arguments as an object is deprecated.');\r\n\r\n        var _arguments2 = _slice.call(arguments);\r\n\r\n        var group = _arguments2[0];\r\n        var force = _arguments2[1];\r\n\r\n        options = { group: group, force: force };\r\n      }\r\n      return ParsleyForm__statusMapping[this.whenValid(options).state()];\r\n    },\r\n\r\n    // Iterate over refreshed fields and validate them.\r\n    // Returns a promise.\r\n    // A validation that immediately fails will interrupt the validations.\r\n    whenValid: function whenValid() {\r\n      var _this5 = this;\r\n\r\n      var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n      var group = _ref3.group;\r\n      var force = _ref3.force;\r\n\r\n      this._refreshFields();\r\n\r\n      var promises = this._withoutReactualizingFormOptions(function () {\r\n        return $.map(_this5.fields, function (field) {\r\n          return field.whenValid({ group: group, force: force });\r\n        });\r\n      });\r\n      return $.when.apply($, _toConsumableArray(promises));\r\n    },\r\n\r\n    _refreshFields: function _refreshFields() {\r\n      return this.actualizeOptions()._bindFields();\r\n    },\r\n\r\n    _bindFields: function _bindFields() {\r\n      var _this6 = this;\r\n\r\n      var oldFields = this.fields;\r\n\r\n      this.fields = [];\r\n      this.fieldsMappedById = {};\r\n\r\n      this._withoutReactualizingFormOptions(function () {\r\n        _this6.$element.find(_this6.options.inputs).not(_this6.options.excluded).each(function (_, element) {\r\n          var fieldInstance = new window.Parsley.Factory(element, {}, _this6);\r\n\r\n          // Only add valid and not excluded `ParsleyField` and `ParsleyFieldMultiple` children\r\n          if (('ParsleyField' === fieldInstance.__class__ || 'ParsleyFieldMultiple' === fieldInstance.__class__) && true !== fieldInstance.options.excluded) if ('undefined' === typeof _this6.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__]) {\r\n            _this6.fieldsMappedById[fieldInstance.__class__ + '-' + fieldInstance.__id__] = fieldInstance;\r\n            _this6.fields.push(fieldInstance);\r\n          }\r\n        });\r\n\r\n        $(oldFields).not(_this6.fields).each(function (_, field) {\r\n          field._trigger('reset');\r\n        });\r\n      });\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Looping on a form's fields to do validation or similar\r\n    // will trigger reactualizing options on all of them, which\r\n    // in turn will reactualize the form's options.\r\n    // To avoid calling actualizeOptions so many times on the form\r\n    // for nothing, _withoutReactualizingFormOptions temporarily disables\r\n    // the method actualizeOptions on this form while `fn` is called.\r\n    _withoutReactualizingFormOptions: function _withoutReactualizingFormOptions(fn) {\r\n      var oldActualizeOptions = this.actualizeOptions;\r\n      this.actualizeOptions = function () {\r\n        return this;\r\n      };\r\n      var result = fn();\r\n      this.actualizeOptions = oldActualizeOptions;\r\n      return result;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    // Returns true iff event is not interrupted and default not prevented.\r\n    _trigger: function _trigger(eventName) {\r\n      return this.trigger('form:' + eventName);\r\n    }\r\n\r\n  };\r\n\r\n  var ConstraintFactory = function ConstraintFactory(parsleyField, name, requirements, priority, isDomConstraint) {\r\n    if (!/ParsleyField/.test(parsleyField.__class__)) throw new Error('ParsleyField or ParsleyFieldMultiple instance expected');\r\n\r\n    var validatorSpec = window.Parsley._validatorRegistry.validators[name];\r\n    var validator = new ParsleyValidator(validatorSpec);\r\n\r\n    $.extend(this, {\r\n      validator: validator,\r\n      name: name,\r\n      requirements: requirements,\r\n      priority: priority || parsleyField.options[name + 'Priority'] || validator.priority,\r\n      isDomConstraint: true === isDomConstraint\r\n    });\r\n    this._parseRequirements(parsleyField.options);\r\n  };\r\n\r\n  var capitalize = function capitalize(str) {\r\n    var cap = str[0].toUpperCase();\r\n    return cap + str.slice(1);\r\n  };\r\n\r\n  ConstraintFactory.prototype = {\r\n    validate: function validate(value, instance) {\r\n      var args = this.requirementList.slice(0); // Make copy\r\n      args.unshift(value);\r\n      args.push(instance);\r\n      return this.validator.validate.apply(this.validator, args);\r\n    },\r\n\r\n    _parseRequirements: function _parseRequirements(options) {\r\n      var _this7 = this;\r\n\r\n      this.requirementList = this.validator.parseRequirements(this.requirements, function (key) {\r\n        return options[_this7.name + capitalize(key)];\r\n      });\r\n    }\r\n  };\r\n\r\n  var ParsleyField = function ParsleyField(field, domOptions, options, parsleyFormInstance) {\r\n    this.__class__ = 'ParsleyField';\r\n    this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n    this.$element = $(field);\r\n\r\n    // Set parent if we have one\r\n    if ('undefined' !== typeof parsleyFormInstance) {\r\n      this.parent = parsleyFormInstance;\r\n    }\r\n\r\n    this.options = options;\r\n    this.domOptions = domOptions;\r\n\r\n    // Initialize some properties\r\n    this.constraints = [];\r\n    this.constraintsByName = {};\r\n    this.validationResult = [];\r\n\r\n    // Bind constraints\r\n    this._bindConstraints();\r\n  };\r\n\r\n  var parsley_field__statusMapping = { pending: null, resolved: true, rejected: false };\r\n\r\n  ParsleyField.prototype = {\r\n    // # Public API\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns `true`, an array of the validators that failed, or\r\n    // `null` if validation is not finished. Prefer using whenValidate\r\n    validate: function validate(options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling validate on a parsley field without passing arguments as an object is deprecated.');\r\n        options = { options: options };\r\n      }\r\n      var promise = this.whenValidate(options);\r\n      if (!promise) // If excluded with `group` option\r\n        return true;\r\n      switch (promise.state()) {\r\n        case 'pending':\r\n          return null;\r\n        case 'resolved':\r\n          return true;\r\n        case 'rejected':\r\n          return this.validationResult;\r\n      }\r\n    },\r\n\r\n    // Validate field and trigger some events for mainly `ParsleyUI`\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if field is not in the given `group`.\r\n    whenValidate: function whenValidate() {\r\n      var _this8 = this;\r\n\r\n      var _ref4 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n      var force = _ref4.force;\r\n      var group = _ref4.group;\r\n\r\n      // do not validate a field if not the same as given validation group\r\n      this.refreshConstraints();\r\n      if (group && !this._isInGroup(group)) return;\r\n\r\n      this.value = this.getValue();\r\n\r\n      // Field Validate event. `this.value` could be altered for custom needs\r\n      this._trigger('validate');\r\n\r\n      return this.whenValid({ force: force, value: this.value, _refreshed: true }).done(function () {\r\n        _this8._trigger('success');\r\n      }).fail(function () {\r\n        _this8._trigger('error');\r\n      }).always(function () {\r\n        _this8._trigger('validated');\r\n      });\r\n    },\r\n\r\n    hasConstraints: function hasConstraints() {\r\n      return 0 !== this.constraints.length;\r\n    },\r\n\r\n    // An empty optional field does not need validation\r\n    needsValidation: function needsValidation(value) {\r\n      if ('undefined' === typeof value) value = this.getValue();\r\n\r\n      // If a field is empty and not required, it is valid\r\n      // Except if `data-parsley-validate-if-empty` explicitely added, useful for some custom validators\r\n      if (!value.length && !this._isRequired() && 'undefined' === typeof this.options.validateIfEmpty) return false;\r\n\r\n      return true;\r\n    },\r\n\r\n    _isInGroup: function _isInGroup(group) {\r\n      if ($.isArray(this.options.group)) return -1 !== $.inArray(group, this.options.group);\r\n      return this.options.group === group;\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // Returns `true` iff all constraints pass, `false` if there are failures,\r\n    // or `null` if the result can not be determined yet (depends on a promise)\r\n    // See also `whenValid`.\r\n    isValid: function isValid(options) {\r\n      if (arguments.length >= 1 && !$.isPlainObject(options)) {\r\n        ParsleyUtils__default.warnOnce('Calling isValid on a parsley field without passing arguments as an object is deprecated.');\r\n\r\n        var _arguments3 = _slice.call(arguments);\r\n\r\n        var force = _arguments3[0];\r\n        var value = _arguments3[1];\r\n\r\n        options = { force: force, value: value };\r\n      }\r\n      var promise = this.whenValid(options);\r\n      if (!promise) // Excluded via `group`\r\n        return true;\r\n      return parsley_field__statusMapping[promise.state()];\r\n    },\r\n\r\n    // Just validate field. Do not trigger any event.\r\n    // @returns a promise that succeeds only when all validations do\r\n    // or `undefined` if the field is not in the given `group`.\r\n    // The argument `force` will force validation of empty fields.\r\n    // If a `value` is given, it will be validated instead of the value of the input.\r\n    whenValid: function whenValid() {\r\n      var _this9 = this;\r\n\r\n      var _ref5 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n\r\n      var _ref5$force = _ref5.force;\r\n      var force = _ref5$force === undefined ? false : _ref5$force;\r\n      var value = _ref5.value;\r\n      var group = _ref5.group;\r\n      var _refreshed = _ref5._refreshed;\r\n\r\n      // Recompute options and rebind constraints to have latest changes\r\n      if (!_refreshed) this.refreshConstraints();\r\n      // do not validate a field if not the same as given validation group\r\n      if (group && !this._isInGroup(group)) return;\r\n\r\n      this.validationResult = true;\r\n\r\n      // A field without constraint is valid\r\n      if (!this.hasConstraints()) return $.when();\r\n\r\n      // Value could be passed as argument, needed to add more power to 'parsley:field:validate'\r\n      if ('undefined' === typeof value || null === value) value = this.getValue();\r\n\r\n      if (!this.needsValidation(value) && true !== force) return $.when();\r\n\r\n      var groupedConstraints = this._getGroupedConstraints();\r\n      var promises = [];\r\n      $.each(groupedConstraints, function (_, constraints) {\r\n        // Process one group of constraints at a time, we validate the constraints\r\n        // and combine the promises together.\r\n        var promise = $.when.apply($, _toConsumableArray($.map(constraints, function (constraint) {\r\n          return _this9._validateConstraint(value, constraint);\r\n        })));\r\n        promises.push(promise);\r\n        if (promise.state() === 'rejected') return false; // Interrupt processing if a group has already failed\r\n      });\r\n      return $.when.apply($, promises);\r\n    },\r\n\r\n    // @returns a promise\r\n    _validateConstraint: function _validateConstraint(value, constraint) {\r\n      var _this10 = this;\r\n\r\n      var result = constraint.validate(value, this);\r\n      // Map false to a failed promise\r\n      if (false === result) result = $.Deferred().reject();\r\n      // Make sure we return a promise and that we record failures\r\n      return $.when(result).fail(function (errorMessage) {\r\n        if (true === _this10.validationResult) _this10.validationResult = [];\r\n        _this10.validationResult.push({\r\n          assert: constraint,\r\n          errorMessage: 'string' === typeof errorMessage && errorMessage\r\n        });\r\n      });\r\n    },\r\n\r\n    // @returns Parsley field computed value that could be overrided or configured in DOM\r\n    getValue: function getValue() {\r\n      var value;\r\n\r\n      // Value could be overriden in DOM or with explicit options\r\n      if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) value = this.options.value;else value = this.$element.val();\r\n\r\n      // Handle wrong DOM or configurations\r\n      if ('undefined' === typeof value || null === value) return '';\r\n\r\n      return this._handleWhitespace(value);\r\n    },\r\n\r\n    // Actualize options that could have change since previous validation\r\n    // Re-bind accordingly constraints (could be some new, removed or updated)\r\n    refreshConstraints: function refreshConstraints() {\r\n      return this.actualizeOptions()._bindConstraints();\r\n    },\r\n\r\n    /**\r\n    * Add a new constraint to a field\r\n    *\r\n    * @param {String}   name\r\n    * @param {Mixed}    requirements      optional\r\n    * @param {Number}   priority          optional\r\n    * @param {Boolean}  isDomConstraint   optional\r\n    */\r\n    addConstraint: function addConstraint(name, requirements, priority, isDomConstraint) {\r\n\r\n      if (window.Parsley._validatorRegistry.validators[name]) {\r\n        var constraint = new ConstraintFactory(this, name, requirements, priority, isDomConstraint);\r\n\r\n        // if constraint already exist, delete it and push new version\r\n        if ('undefined' !== this.constraintsByName[constraint.name]) this.removeConstraint(constraint.name);\r\n\r\n        this.constraints.push(constraint);\r\n        this.constraintsByName[constraint.name] = constraint;\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // Remove a constraint\r\n    removeConstraint: function removeConstraint(name) {\r\n      for (var i = 0; i < this.constraints.length; i++) if (name === this.constraints[i].name) {\r\n        this.constraints.splice(i, 1);\r\n        break;\r\n      }\r\n      delete this.constraintsByName[name];\r\n      return this;\r\n    },\r\n\r\n    // Update a constraint (Remove + re-add)\r\n    updateConstraint: function updateConstraint(name, parameters, priority) {\r\n      return this.removeConstraint(name).addConstraint(name, parameters, priority);\r\n    },\r\n\r\n    // # Internals\r\n\r\n    // Internal only.\r\n    // Bind constraints from config + options + DOM\r\n    _bindConstraints: function _bindConstraints() {\r\n      var constraints = [];\r\n      var constraintsByName = {};\r\n\r\n      // clean all existing DOM constraints to only keep javascript user constraints\r\n      for (var i = 0; i < this.constraints.length; i++) if (false === this.constraints[i].isDomConstraint) {\r\n        constraints.push(this.constraints[i]);\r\n        constraintsByName[this.constraints[i].name] = this.constraints[i];\r\n      }\r\n\r\n      this.constraints = constraints;\r\n      this.constraintsByName = constraintsByName;\r\n\r\n      // then re-add Parsley DOM-API constraints\r\n      for (var name in this.options) this.addConstraint(name, this.options[name], undefined, true);\r\n\r\n      // finally, bind special HTML5 constraints\r\n      return this._bindHtml5Constraints();\r\n    },\r\n\r\n    // Internal only.\r\n    // Bind specific HTML5 constraints to be HTML5 compliant\r\n    _bindHtml5Constraints: function _bindHtml5Constraints() {\r\n      // html5 required\r\n      if (this.$element.hasClass('required') || this.$element.attr('required')) this.addConstraint('required', true, undefined, true);\r\n\r\n      // html5 pattern\r\n      if ('string' === typeof this.$element.attr('pattern')) this.addConstraint('pattern', this.$element.attr('pattern'), undefined, true);\r\n\r\n      // range\r\n      if ('undefined' !== typeof this.$element.attr('min') && 'undefined' !== typeof this.$element.attr('max')) this.addConstraint('range', [this.$element.attr('min'), this.$element.attr('max')], undefined, true);\r\n\r\n      // HTML5 min\r\n      else if ('undefined' !== typeof this.$element.attr('min')) this.addConstraint('min', this.$element.attr('min'), undefined, true);\r\n\r\n        // HTML5 max\r\n        else if ('undefined' !== typeof this.$element.attr('max')) this.addConstraint('max', this.$element.attr('max'), undefined, true);\r\n\r\n      // length\r\n      if ('undefined' !== typeof this.$element.attr('minlength') && 'undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('length', [this.$element.attr('minlength'), this.$element.attr('maxlength')], undefined, true);\r\n\r\n      // HTML5 minlength\r\n      else if ('undefined' !== typeof this.$element.attr('minlength')) this.addConstraint('minlength', this.$element.attr('minlength'), undefined, true);\r\n\r\n        // HTML5 maxlength\r\n        else if ('undefined' !== typeof this.$element.attr('maxlength')) this.addConstraint('maxlength', this.$element.attr('maxlength'), undefined, true);\r\n\r\n      // html5 types\r\n      var type = this.$element.attr('type');\r\n\r\n      if ('undefined' === typeof type) return this;\r\n\r\n      // Small special case here for HTML5 number: integer validator if step attribute is undefined or an integer value, number otherwise\r\n      if ('number' === type) {\r\n        return this.addConstraint('type', ['number', {\r\n          step: this.$element.attr('step'),\r\n          base: this.$element.attr('min') || this.$element.attr('value')\r\n        }], undefined, true);\r\n        // Regular other HTML5 supported types\r\n      } else if (/^(email|url|range)$/i.test(type)) {\r\n          return this.addConstraint('type', type, undefined, true);\r\n        }\r\n      return this;\r\n    },\r\n\r\n    // Internal only.\r\n    // Field is required if have required constraint without `false` value\r\n    _isRequired: function _isRequired() {\r\n      if ('undefined' === typeof this.constraintsByName.required) return false;\r\n\r\n      return false !== this.constraintsByName.required.requirements;\r\n    },\r\n\r\n    // Internal only.\r\n    // Shortcut to trigger an event\r\n    _trigger: function _trigger(eventName) {\r\n      return this.trigger('field:' + eventName);\r\n    },\r\n\r\n    // Internal only\r\n    // Handles whitespace in a value\r\n    // Use `data-parsley-whitespace=\"squish\"` to auto squish input value\r\n    // Use `data-parsley-whitespace=\"trim\"` to auto trim input value\r\n    _handleWhitespace: function _handleWhitespace(value) {\r\n      if (true === this.options.trimValue) ParsleyUtils__default.warnOnce('data-parsley-trim-value=\"true\" is deprecated, please use data-parsley-whitespace=\"trim\"');\r\n\r\n      if ('squish' === this.options.whitespace) value = value.replace(/\\s{2,}/g, ' ');\r\n\r\n      if ('trim' === this.options.whitespace || 'squish' === this.options.whitespace || true === this.options.trimValue) value = ParsleyUtils__default.trimString(value);\r\n\r\n      return value;\r\n    },\r\n\r\n    // Internal only.\r\n    // Returns the constraints, grouped by descending priority.\r\n    // The result is thus an array of arrays of constraints.\r\n    _getGroupedConstraints: function _getGroupedConstraints() {\r\n      if (false === this.options.priorityEnabled) return [this.constraints];\r\n\r\n      var groupedConstraints = [];\r\n      var index = {};\r\n\r\n      // Create array unique of priorities\r\n      for (var i = 0; i < this.constraints.length; i++) {\r\n        var p = this.constraints[i].priority;\r\n        if (!index[p]) groupedConstraints.push(index[p] = []);\r\n        index[p].push(this.constraints[i]);\r\n      }\r\n      // Sort them by priority DESC\r\n      groupedConstraints.sort(function (a, b) {\r\n        return b[0].priority - a[0].priority;\r\n      });\r\n\r\n      return groupedConstraints;\r\n    }\r\n\r\n  };\r\n\r\n  var parsley_field = ParsleyField;\r\n\r\n  var ParsleyMultiple = function ParsleyMultiple() {\r\n    this.__class__ = 'ParsleyFieldMultiple';\r\n  };\r\n\r\n  ParsleyMultiple.prototype = {\r\n    // Add new `$element` sibling for multiple field\r\n    addElement: function addElement($element) {\r\n      this.$elements.push($element);\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.refreshConstraints()`\r\n    refreshConstraints: function refreshConstraints() {\r\n      var fieldConstraints;\r\n\r\n      this.constraints = [];\r\n\r\n      // Select multiple special treatment\r\n      if (this.$element.is('select')) {\r\n        this.actualizeOptions()._bindConstraints();\r\n\r\n        return this;\r\n      }\r\n\r\n      // Gather all constraints for each input in the multiple group\r\n      for (var i = 0; i < this.$elements.length; i++) {\r\n\r\n        // Check if element have not been dynamically removed since last binding\r\n        if (!$('html').has(this.$elements[i]).length) {\r\n          this.$elements.splice(i, 1);\r\n          continue;\r\n        }\r\n\r\n        fieldConstraints = this.$elements[i].data('ParsleyFieldMultiple').refreshConstraints().constraints;\r\n\r\n        for (var j = 0; j < fieldConstraints.length; j++) this.addConstraint(fieldConstraints[j].name, fieldConstraints[j].requirements, fieldConstraints[j].priority, fieldConstraints[j].isDomConstraint);\r\n      }\r\n\r\n      return this;\r\n    },\r\n\r\n    // See `ParsleyField.getValue()`\r\n    getValue: function getValue() {\r\n      // Value could be overriden in DOM\r\n      if ('function' === typeof this.options.value) value = this.options.value(this);else if ('undefined' !== typeof this.options.value) return this.options.value;\r\n\r\n      // Radio input case\r\n      if (this.$element.is('input[type=radio]')) return this._findRelated().filter(':checked').val() || '';\r\n\r\n      // checkbox input case\r\n      if (this.$element.is('input[type=checkbox]')) {\r\n        var values = [];\r\n\r\n        this._findRelated().filter(':checked').each(function () {\r\n          values.push($(this).val());\r\n        });\r\n\r\n        return values;\r\n      }\r\n\r\n      // Select multiple case\r\n      if (this.$element.is('select') && null === this.$element.val()) return [];\r\n\r\n      // Default case that should never happen\r\n      return this.$element.val();\r\n    },\r\n\r\n    _init: function _init() {\r\n      this.$elements = [this.$element];\r\n\r\n      return this;\r\n    }\r\n  };\r\n\r\n  var ParsleyFactory = function ParsleyFactory(element, options, parsleyFormInstance) {\r\n    this.$element = $(element);\r\n\r\n    // If the element has already been bound, returns its saved Parsley instance\r\n    var savedparsleyFormInstance = this.$element.data('Parsley');\r\n    if (savedparsleyFormInstance) {\r\n\r\n      // If the saved instance has been bound without a ParsleyForm parent and there is one given in this call, add it\r\n      if ('undefined' !== typeof parsleyFormInstance && savedparsleyFormInstance.parent === window.Parsley) {\r\n        savedparsleyFormInstance.parent = parsleyFormInstance;\r\n        savedparsleyFormInstance._resetOptions(savedparsleyFormInstance.options);\r\n      }\r\n\r\n      return savedparsleyFormInstance;\r\n    }\r\n\r\n    // Parsley must be instantiated with a DOM element or jQuery $element\r\n    if (!this.$element.length) throw new Error('You must bind Parsley on an existing element.');\r\n\r\n    if ('undefined' !== typeof parsleyFormInstance && 'ParsleyForm' !== parsleyFormInstance.__class__) throw new Error('Parent instance must be a ParsleyForm instance');\r\n\r\n    this.parent = parsleyFormInstance || window.Parsley;\r\n    return this.init(options);\r\n  };\r\n\r\n  ParsleyFactory.prototype = {\r\n    init: function init(options) {\r\n      this.__class__ = 'Parsley';\r\n      this.__version__ = '@@version';\r\n      this.__id__ = ParsleyUtils__default.generateID();\r\n\r\n      // Pre-compute options\r\n      this._resetOptions(options);\r\n\r\n      // A ParsleyForm instance is obviously a `<form>` element but also every node that is not an input and has the `data-parsley-validate` attribute\r\n      if (this.$element.is('form') || ParsleyUtils__default.checkAttr(this.$element, this.options.namespace, 'validate') && !this.$element.is(this.options.inputs)) return this.bind('parsleyForm');\r\n\r\n      // Every other element is bound as a `ParsleyField` or `ParsleyFieldMultiple`\r\n      return this.isMultiple() ? this.handleMultiple() : this.bind('parsleyField');\r\n    },\r\n\r\n    isMultiple: function isMultiple() {\r\n      return this.$element.is('input[type=radio], input[type=checkbox]') || this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple');\r\n    },\r\n\r\n    // Multiples fields are a real nightmare :(\r\n    // Maybe some refactoring would be appreciated here...\r\n    handleMultiple: function handleMultiple() {\r\n      var _this11 = this;\r\n\r\n      var name;\r\n      var multiple;\r\n      var parsleyMultipleInstance;\r\n\r\n      // Handle multiple name\r\n      if (this.options.multiple) ; // We already have our 'multiple' identifier\r\n      else if ('undefined' !== typeof this.$element.attr('name') && this.$element.attr('name').length) this.options.multiple = name = this.$element.attr('name');else if ('undefined' !== typeof this.$element.attr('id') && this.$element.attr('id').length) this.options.multiple = this.$element.attr('id');\r\n\r\n      // Special select multiple input\r\n      if (this.$element.is('select') && 'undefined' !== typeof this.$element.attr('multiple')) {\r\n        this.options.multiple = this.options.multiple || this.__id__;\r\n        return this.bind('parsleyFieldMultiple');\r\n\r\n        // Else for radio / checkboxes, we need a `name` or `data-parsley-multiple` to properly bind it\r\n      } else if (!this.options.multiple) {\r\n          ParsleyUtils__default.warn('To be bound by Parsley, a radio, a checkbox and a multiple select input must have either a name or a multiple option.', this.$element);\r\n          return this;\r\n        }\r\n\r\n      // Remove special chars\r\n      this.options.multiple = this.options.multiple.replace(/(:|\\.|\\[|\\]|\\{|\\}|\\$)/g, '');\r\n\r\n      // Add proper `data-parsley-multiple` to siblings if we have a valid multiple name\r\n      if ('undefined' !== typeof name) {\r\n        $('input[name=\"' + name + '\"]').each(function (i, input) {\r\n          if ($(input).is('input[type=radio], input[type=checkbox]')) $(input).attr(_this11.options.namespace + 'multiple', _this11.options.multiple);\r\n        });\r\n      }\r\n\r\n      // Check here if we don't already have a related multiple instance saved\r\n      var $previouslyRelated = this._findRelated();\r\n      for (var i = 0; i < $previouslyRelated.length; i++) {\r\n        parsleyMultipleInstance = $($previouslyRelated.get(i)).data('Parsley');\r\n        if ('undefined' !== typeof parsleyMultipleInstance) {\r\n\r\n          if (!this.$element.data('ParsleyFieldMultiple')) {\r\n            parsleyMultipleInstance.addElement(this.$element);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Create a secret ParsleyField instance for every multiple field. It will be stored in `data('ParsleyFieldMultiple')`\r\n      // And will be useful later to access classic `ParsleyField` stuff while being in a `ParsleyFieldMultiple` instance\r\n      this.bind('parsleyField', true);\r\n\r\n      return parsleyMultipleInstance || this.bind('parsleyFieldMultiple');\r\n    },\r\n\r\n    // Return proper `ParsleyForm`, `ParsleyField` or `ParsleyFieldMultiple`\r\n    bind: function bind(type, doNotStore) {\r\n      var parsleyInstance;\r\n\r\n      switch (type) {\r\n        case 'parsleyForm':\r\n          parsleyInstance = $.extend(new ParsleyForm(this.$element, this.domOptions, this.options), window.ParsleyExtend)._bindFields();\r\n          break;\r\n        case 'parsleyField':\r\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), window.ParsleyExtend);\r\n          break;\r\n        case 'parsleyFieldMultiple':\r\n          parsleyInstance = $.extend(new parsley_field(this.$element, this.domOptions, this.options, this.parent), new ParsleyMultiple(), window.ParsleyExtend)._init();\r\n          break;\r\n        default:\r\n          throw new Error(type + 'is not a supported Parsley type');\r\n      }\r\n\r\n      if (this.options.multiple) ParsleyUtils__default.setAttr(this.$element, this.options.namespace, 'multiple', this.options.multiple);\r\n\r\n      if ('undefined' !== typeof doNotStore) {\r\n        this.$element.data('ParsleyFieldMultiple', parsleyInstance);\r\n\r\n        return parsleyInstance;\r\n      }\r\n\r\n      // Store the freshly bound instance in a DOM element for later access using jQuery `data()`\r\n      this.$element.data('Parsley', parsleyInstance);\r\n\r\n      // Tell the world we have a new ParsleyForm or ParsleyField instance!\r\n      parsleyInstance._trigger('init');\r\n\r\n      return parsleyInstance;\r\n    }\r\n  };\r\n\r\n  var vernums = $.fn.jquery.split('.');\r\n  if (parseInt(vernums[0]) <= 1 && parseInt(vernums[1]) < 8) {\r\n    throw \"The loaded version of jQuery is too old. Please upgrade to 1.8.x or better.\";\r\n  }\r\n  if (!vernums.forEach) {\r\n    ParsleyUtils__default.warn('Parsley requires ES5 to run properly. Please include https://github.com/es-shims/es5-shim');\r\n  }\r\n  // Inherit `on`, `off` & `trigger` to Parsley:\r\n  var Parsley = $.extend(new ParsleyAbstract(), {\r\n    $element: $(document),\r\n    actualizeOptions: null,\r\n    _resetOptions: null,\r\n    Factory: ParsleyFactory,\r\n    version: '@@version'\r\n  });\r\n\r\n  // Supplement ParsleyField and Form with ParsleyAbstract\r\n  // This way, the constructors will have access to those methods\r\n  $.extend(parsley_field.prototype, ParsleyAbstract.prototype);\r\n  $.extend(ParsleyForm.prototype, ParsleyAbstract.prototype);\r\n  // Inherit actualizeOptions and _resetOptions:\r\n  $.extend(ParsleyFactory.prototype, ParsleyAbstract.prototype);\r\n\r\n  // ### jQuery API\r\n  // `$('.elem').parsley(options)` or `$('.elem').psly(options)`\r\n  $.fn.parsley = $.fn.psly = function (options) {\r\n    if (this.length > 1) {\r\n      var instances = [];\r\n\r\n      this.each(function () {\r\n        instances.push($(this).parsley(options));\r\n      });\r\n\r\n      return instances;\r\n    }\r\n\r\n    // Return undefined if applied to non existing DOM element\r\n    if (!$(this).length) {\r\n      ParsleyUtils__default.warn('You must bind Parsley on an existing element.');\r\n\r\n      return;\r\n    }\r\n\r\n    return new ParsleyFactory(this, options);\r\n  };\r\n\r\n  // ### ParsleyField and ParsleyForm extension\r\n  // Ensure the extension is now defined if it wasn't previously\r\n  if ('undefined' === typeof window.ParsleyExtend) window.ParsleyExtend = {};\r\n\r\n  // ### Parsley config\r\n  // Inherit from ParsleyDefault, and copy over any existing values\r\n  Parsley.options = $.extend(ParsleyUtils__default.objectCreate(ParsleyDefaults), window.ParsleyConfig);\r\n  window.ParsleyConfig = Parsley.options; // Old way of accessing global options\r\n\r\n  // ### Globals\r\n  window.Parsley = window.psly = Parsley;\r\n  window.ParsleyUtils = ParsleyUtils__default;\r\n\r\n  // ### Define methods that forward to the registry, and deprecate all access except through window.Parsley\r\n  var registry = window.Parsley._validatorRegistry = new ParsleyValidatorRegistry(window.ParsleyConfig.validators, window.ParsleyConfig.i18n);\r\n  window.ParsleyValidator = {};\r\n  $.each('setLocale addCatalog addMessage addMessages getErrorMessage formatMessage addValidator updateValidator removeValidator'.split(' '), function (i, method) {\r\n    window.Parsley[method] = $.proxy(registry, method);\r\n    window.ParsleyValidator[method] = function () {\r\n      var _window$Parsley;\r\n\r\n      ParsleyUtils__default.warnOnce('Accessing the method \\'' + method + '\\' through ParsleyValidator is deprecated. Simply call \\'window.Parsley.' + method + '(...)\\'');\r\n      return (_window$Parsley = window.Parsley)[method].apply(_window$Parsley, arguments);\r\n    };\r\n  });\r\n\r\n  // ### ParsleyUI\r\n  // UI is a separate class that only listens to some events and then modifies the DOM accordingly\r\n  // Could be overriden by defining a `window.ParsleyConfig.ParsleyUI` appropriate class (with `listen()` method basically)\r\n  window.ParsleyUI = 'function' === typeof window.ParsleyConfig.ParsleyUI ? new window.ParsleyConfig.ParsleyUI().listen() : new ParsleyUI().listen();\r\n\r\n  // ### PARSLEY auto-binding\r\n  // Prevent it by setting `ParsleyConfig.autoBind` to `false`\r\n  if (false !== window.ParsleyConfig.autoBind) {\r\n    $(function () {\r\n      // Works only on `data-parsley-validate`.\r\n      if ($('[data-parsley-validate]').length) $('[data-parsley-validate]').parsley();\r\n    });\r\n  }\r\n\r\n  var o = $({});\r\n  var deprecated = function deprecated() {\r\n    ParsleyUtils__default.warnOnce(\"Parsley's pubsub module is deprecated; use the 'on' and 'off' methods on parsley instances or window.Parsley\");\r\n  };\r\n\r\n  // Returns an event handler that calls `fn` with the arguments it expects\r\n  function adapt(fn, context) {\r\n    // Store to allow unbinding\r\n    if (!fn.parsleyAdaptedCallback) {\r\n      fn.parsleyAdaptedCallback = function () {\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n        args.unshift(this);\r\n        fn.apply(context || o, args);\r\n      };\r\n    }\r\n    return fn.parsleyAdaptedCallback;\r\n  }\r\n\r\n  var eventPrefix = 'parsley:';\r\n  // Converts 'parsley:form:validate' into 'form:validate'\r\n  function eventName(name) {\r\n    if (name.lastIndexOf(eventPrefix, 0) === 0) return name.substr(eventPrefix.length);\r\n    return name;\r\n  }\r\n\r\n  // $.listen is deprecated. Use Parsley.on instead.\r\n  $.listen = function (name, callback) {\r\n    var context;\r\n    deprecated();\r\n    if ('object' === typeof arguments[1] && 'function' === typeof arguments[2]) {\r\n      context = arguments[1];\r\n      callback = arguments[2];\r\n    }\r\n\r\n    if ('function' !== typeof callback) throw new Error('Wrong parameters');\r\n\r\n    window.Parsley.on(eventName(name), adapt(callback, context));\r\n  };\r\n\r\n  $.listenTo = function (instance, name, fn) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\r\n\r\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong parameters');\r\n\r\n    instance.on(eventName(name), adapt(fn));\r\n  };\r\n\r\n  $.unsubscribe = function (name, fn) {\r\n    deprecated();\r\n    if ('string' !== typeof name || 'function' !== typeof fn) throw new Error('Wrong arguments');\r\n    window.Parsley.off(eventName(name), fn.parsleyAdaptedCallback);\r\n  };\r\n\r\n  $.unsubscribeTo = function (instance, name) {\r\n    deprecated();\r\n    if (!(instance instanceof parsley_field) && !(instance instanceof ParsleyForm)) throw new Error('Must give Parsley instance');\r\n    instance.off(eventName(name));\r\n  };\r\n\r\n  $.unsubscribeAll = function (name) {\r\n    deprecated();\r\n    window.Parsley.off(eventName(name));\r\n    $('form,input,textarea,select').each(function () {\r\n      var instance = $(this).data('Parsley');\r\n      if (instance) {\r\n        instance.off(eventName(name));\r\n      }\r\n    });\r\n  };\r\n\r\n  // $.emit is deprecated. Use jQuery events instead.\r\n  $.emit = function (name, instance) {\r\n    var _instance;\r\n\r\n    deprecated();\r\n    var instanceGiven = instance instanceof parsley_field || instance instanceof ParsleyForm;\r\n    var args = Array.prototype.slice.call(arguments, instanceGiven ? 2 : 1);\r\n    args.unshift(eventName(name));\r\n    if (!instanceGiven) {\r\n      instance = window.Parsley;\r\n    }\r\n    (_instance = instance).trigger.apply(_instance, _toConsumableArray(args));\r\n  };\r\n\r\n  var pubsub = {};\r\n\r\n  $.extend(true, Parsley, {\r\n    asyncValidators: {\r\n      'default': {\r\n        fn: function fn(xhr) {\r\n          // By default, only status 2xx are deemed successful.\r\n          // Note: we use status instead of state() because responses with status 200\r\n          // but invalid messages (e.g. an empty body for content type set to JSON) will\r\n          // result in state() === 'rejected'.\r\n          return xhr.status >= 200 && xhr.status < 300;\r\n        },\r\n        url: false\r\n      },\r\n      reverse: {\r\n        fn: function fn(xhr) {\r\n          // If reverse option is set, a failing ajax request is considered successful\r\n          return xhr.status < 200 || xhr.status >= 300;\r\n        },\r\n        url: false\r\n      }\r\n    },\r\n\r\n    addAsyncValidator: function addAsyncValidator(name, fn, url, options) {\r\n      Parsley.asyncValidators[name] = {\r\n        fn: fn,\r\n        url: url || false,\r\n        options: options || {}\r\n      };\r\n\r\n      return this;\r\n    }\r\n\r\n  });\r\n\r\n  Parsley.addValidator('remote', {\r\n    requirementType: {\r\n      '': 'string',\r\n      'validator': 'string',\r\n      'reverse': 'boolean',\r\n      'options': 'object'\r\n    },\r\n\r\n    validateString: function validateString(value, url, options, instance) {\r\n      var data = {};\r\n      var ajaxOptions;\r\n      var csr;\r\n      var validator = options.validator || (true === options.reverse ? 'reverse' : 'default');\r\n\r\n      if ('undefined' === typeof Parsley.asyncValidators[validator]) throw new Error('Calling an undefined async validator: `' + validator + '`');\r\n\r\n      url = Parsley.asyncValidators[validator].url || url;\r\n\r\n      // Fill current value\r\n      if (url.indexOf('{value}') > -1) {\r\n        url = url.replace('{value}', encodeURIComponent(value));\r\n      } else {\r\n        data[instance.$element.attr('name') || instance.$element.attr('id')] = value;\r\n      }\r\n\r\n      // Merge options passed in from the function with the ones in the attribute\r\n      var remoteOptions = $.extend(true, options.options || {}, Parsley.asyncValidators[validator].options);\r\n\r\n      // All `$.ajax(options)` could be overridden or extended directly from DOM in `data-parsley-remote-options`\r\n      ajaxOptions = $.extend(true, {}, {\r\n        url: url,\r\n        data: data,\r\n        type: 'GET'\r\n      }, remoteOptions);\r\n\r\n      // Generate store key based on ajax options\r\n      instance.trigger('field:ajaxoptions', instance, ajaxOptions);\r\n\r\n      csr = $.param(ajaxOptions);\r\n\r\n      // Initialise querry cache\r\n      if ('undefined' === typeof Parsley._remoteCache) Parsley._remoteCache = {};\r\n\r\n      // Try to retrieve stored xhr\r\n      var xhr = Parsley._remoteCache[csr] = Parsley._remoteCache[csr] || $.ajax(ajaxOptions);\r\n\r\n      var handleXhr = function handleXhr() {\r\n        var result = Parsley.asyncValidators[validator].fn.call(instance, xhr, url, options);\r\n        if (!result) // Map falsy results to rejected promise\r\n          result = $.Deferred().reject();\r\n        return $.when(result);\r\n      };\r\n\r\n      return xhr.then(handleXhr, handleXhr);\r\n    },\r\n\r\n    priority: -1\r\n  });\r\n\r\n  Parsley.on('form:submit', function () {\r\n    Parsley._remoteCache = {};\r\n  });\r\n\r\n  window.ParsleyExtend.addAsyncValidator = function () {\r\n    ParsleyUtils.warnOnce('Accessing the method `addAsyncValidator` through an instance is deprecated. Simply call `Parsley.addAsyncValidator(...)`');\r\n    return Parsley.addAsyncValidator.apply(Parsley, arguments);\r\n  };\r\n\r\n  // This is included with the Parsley library itself,\r\n  // thus there is no use in adding it to your project.\r\n  Parsley.addMessages('en', {\r\n    defaultMessage: \"This value seems to be invalid.\",\r\n    type: {\r\n      email: \"This value should be a valid email.\",\r\n      url: \"This value should be a valid url.\",\r\n      number: \"This value should be a valid number.\",\r\n      integer: \"This value should be a valid integer.\",\r\n      digits: \"This value should be digits.\",\r\n      alphanum: \"This value should be alphanumeric.\"\r\n    },\r\n    notblank: \"This value should not be blank.\",\r\n    required: \"This value is required.\",\r\n    pattern: \"This value seems to be invalid.\",\r\n    min: \"This value should be greater than or equal to %s.\",\r\n    max: \"This value should be lower than or equal to %s.\",\r\n    range: \"This value should be between %s and %s.\",\r\n    minlength: \"This value is too short. It should have %s characters or more.\",\r\n    maxlength: \"This value is too long. It should have %s characters or fewer.\",\r\n    length: \"This value length is invalid. It should be between %s and %s characters long.\",\r\n    mincheck: \"You must select at least %s choices.\",\r\n    maxcheck: \"You must select %s choices or fewer.\",\r\n    check: \"You must select between %s and %s choices.\",\r\n    equalto: \"This value should be the same.\"\r\n  });\r\n\r\n  Parsley.setLocale('en');\r\n\r\n  var parsley = Parsley;\r\n\r\n  return parsley;\r\n});\r\n//# sourceMappingURL=parsley.js.map","/**\r\n * Copyright (c) 2011-2014 Felix Gnass\r\n * Licensed under the MIT license\r\n * http://spin.js.org/\r\n *\r\n * Example:\r\n    var opts = {\r\n      lines: 12             // The number of lines to draw\r\n    , length: 7             // The length of each line\r\n    , width: 5              // The line thickness\r\n    , radius: 10            // The radius of the inner circle\r\n    , scale: 1.0            // Scales overall size of the spinner\r\n    , corners: 1            // Roundness (0..1)\r\n    , color: '#000'         // #rgb or #rrggbb\r\n    , opacity: 1/4          // Opacity of the lines\r\n    , rotate: 0             // Rotation offset\r\n    , direction: 1          // 1: clockwise, -1: counterclockwise\r\n    , speed: 1              // Rounds per second\r\n    , trail: 100            // Afterglow percentage\r\n    , fps: 20               // Frames per second when using setTimeout()\r\n    , zIndex: 2e9           // Use a high z-index by default\r\n    , className: 'spinner'  // CSS class to assign to the element\r\n    , top: '50%'            // center vertically\r\n    , left: '50%'           // center horizontally\r\n    , shadow: false         // Whether to render a shadow\r\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\r\n    , position: 'absolute'  // Element positioning\r\n    }\r\n    var target = document.getElementById('foo')\r\n    var spinner = new Spinner(opts).spin(target)\r\n */\r\n;(function (root, factory) {\r\n\r\n  /* CommonJS */\r\n  if (typeof module == 'object' && module.exports) module.exports = factory()\r\n\r\n  /* AMD module */\r\n  else if (typeof define == 'function' && define.amd) define(factory)\r\n\r\n  /* Browser global */\r\n  else root.Spinner = factory()\r\n}(this, function () {\r\n  \"use strict\"\r\n\r\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */\r\n    , animations = {} /* Animation rules keyed by their name */\r\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */\r\n    , sheet /* A stylesheet to hold the @keyframe or VML rules. */\r\n\r\n  /**\r\n   * Utility function to create elements. If no tag name is given,\r\n   * a DIV is created. Optionally properties can be passed.\r\n   */\r\n  function createEl (tag, prop) {\r\n    var el = document.createElement(tag || 'div')\r\n      , n\r\n\r\n    for (n in prop) el[n] = prop[n]\r\n    return el\r\n  }\r\n\r\n  /**\r\n   * Appends children and returns the parent.\r\n   */\r\n  function ins (parent /* child1, child2, ...*/) {\r\n    for (var i = 1, n = arguments.length; i < n; i++) {\r\n      parent.appendChild(arguments[i])\r\n    }\r\n\r\n    return parent\r\n  }\r\n\r\n  /**\r\n   * Creates an opacity keyframe animation rule and returns its name.\r\n   * Since most mobile Webkits have timing issues with animation-delay,\r\n   * we create separate rules for each line/segment.\r\n   */\r\n  function addAnimation (alpha, trail, i, lines) {\r\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')\r\n      , start = 0.01 + i/lines * 100\r\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)\r\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()\r\n      , pre = prefix && '-' + prefix + '-' || ''\r\n\r\n    if (!animations[name]) {\r\n      sheet.insertRule(\r\n        '@' + pre + 'keyframes ' + name + '{' +\r\n        '0%{opacity:' + z + '}' +\r\n        start + '%{opacity:' + alpha + '}' +\r\n        (start+0.01) + '%{opacity:1}' +\r\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +\r\n        '100%{opacity:' + z + '}' +\r\n        '}', sheet.cssRules.length)\r\n\r\n      animations[name] = 1\r\n    }\r\n\r\n    return name\r\n  }\r\n\r\n  /**\r\n   * Tries various vendor prefixes and returns the first supported property.\r\n   */\r\n  function vendor (el, prop) {\r\n    var s = el.style\r\n      , pp\r\n      , i\r\n\r\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)\r\n    if (s[prop] !== undefined) return prop\r\n    for (i = 0; i < prefixes.length; i++) {\r\n      pp = prefixes[i]+prop\r\n      if (s[pp] !== undefined) return pp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets multiple style properties at once.\r\n   */\r\n  function css (el, prop) {\r\n    for (var n in prop) {\r\n      el.style[vendor(el, n) || n] = prop[n]\r\n    }\r\n\r\n    return el\r\n  }\r\n\r\n  /**\r\n   * Fills in default values.\r\n   */\r\n  function merge (obj) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var def = arguments[i]\r\n      for (var n in def) {\r\n        if (obj[n] === undefined) obj[n] = def[n]\r\n      }\r\n    }\r\n    return obj\r\n  }\r\n\r\n  /**\r\n   * Returns the line color from the given string or array.\r\n   */\r\n  function getColor (color, idx) {\r\n    return typeof color == 'string' ? color : color[idx % color.length]\r\n  }\r\n\r\n  // Built-in defaults\r\n\r\n  var defaults = {\r\n    lines: 12             // The number of lines to draw\r\n  , length: 7             // The length of each line\r\n  , width: 5              // The line thickness\r\n  , radius: 10            // The radius of the inner circle\r\n  , scale: 1.0            // Scales overall size of the spinner\r\n  , corners: 1            // Roundness (0..1)\r\n  , color: '#000'         // #rgb or #rrggbb\r\n  , opacity: 1/4          // Opacity of the lines\r\n  , rotate: 0             // Rotation offset\r\n  , direction: 1          // 1: clockwise, -1: counterclockwise\r\n  , speed: 1              // Rounds per second\r\n  , trail: 100            // Afterglow percentage\r\n  , fps: 20               // Frames per second when using setTimeout()\r\n  , zIndex: 2e9           // Use a high z-index by default\r\n  , className: 'spinner'  // CSS class to assign to the element\r\n  , top: '50%'            // center vertically\r\n  , left: '50%'           // center horizontally\r\n  , shadow: false         // Whether to render a shadow\r\n  , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\r\n  , position: 'absolute'  // Element positioning\r\n  }\r\n\r\n  /** The constructor */\r\n  function Spinner (o) {\r\n    this.opts = merge(o || {}, Spinner.defaults, defaults)\r\n  }\r\n\r\n  // Global defaults that override the built-ins:\r\n  Spinner.defaults = {}\r\n\r\n  merge(Spinner.prototype, {\r\n    /**\r\n     * Adds the spinner to the given target element. If this instance is already\r\n     * spinning, it is automatically removed from its previous target b calling\r\n     * stop() internally.\r\n     */\r\n    spin: function (target) {\r\n      this.stop()\r\n\r\n      var self = this\r\n        , o = self.opts\r\n        , el = self.el = createEl(null, {className: o.className})\r\n\r\n      css(el, {\r\n        position: o.position\r\n      , width: 0\r\n      , zIndex: o.zIndex\r\n      , left: o.left\r\n      , top: o.top\r\n      })\r\n\r\n      if (target) {\r\n        target.insertBefore(el, target.firstChild || null)\r\n      }\r\n\r\n      el.setAttribute('role', 'progressbar')\r\n      self.lines(el, self.opts)\r\n\r\n      if (!useCssAnimations) {\r\n        // No CSS animation support, use setTimeout() instead\r\n        var i = 0\r\n          , start = (o.lines - 1) * (1 - o.direction) / 2\r\n          , alpha\r\n          , fps = o.fps\r\n          , f = fps / o.speed\r\n          , ostep = (1 - o.opacity) / (f * o.trail / 100)\r\n          , astep = f / o.lines\r\n\r\n        ;(function anim () {\r\n          i++\r\n          for (var j = 0; j < o.lines; j++) {\r\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)\r\n\r\n            self.opacity(el, j * o.direction + start, alpha, o)\r\n          }\r\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))\r\n        })()\r\n      }\r\n      return self\r\n    }\r\n\r\n    /**\r\n     * Stops and removes the Spinner.\r\n     */\r\n  , stop: function () {\r\n      var el = this.el\r\n      if (el) {\r\n        clearTimeout(this.timeout)\r\n        if (el.parentNode) el.parentNode.removeChild(el)\r\n        this.el = undefined\r\n      }\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Internal method that draws the individual lines. Will be overwritten\r\n     * in VML fallback mode below.\r\n     */\r\n  , lines: function (el, o) {\r\n      var i = 0\r\n        , start = (o.lines - 1) * (1 - o.direction) / 2\r\n        , seg\r\n\r\n      function fill (color, shadow) {\r\n        return css(createEl(), {\r\n          position: 'absolute'\r\n        , width: o.scale * (o.length + o.width) + 'px'\r\n        , height: o.scale * o.width + 'px'\r\n        , background: color\r\n        , boxShadow: shadow\r\n        , transformOrigin: 'left'\r\n        , transform: 'rotate(' + ~~(360/o.lines*i + o.rotate) + 'deg) translate(' + o.scale*o.radius + 'px' + ',0)'\r\n        , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'\r\n        })\r\n      }\r\n\r\n      for (; i < o.lines; i++) {\r\n        seg = css(createEl(), {\r\n          position: 'absolute'\r\n        , top: 1 + ~(o.scale * o.width / 2) + 'px'\r\n        , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''\r\n        , opacity: o.opacity\r\n        , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\r\n        })\r\n\r\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {top: '2px'}))\r\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))\r\n      }\r\n      return el\r\n    }\r\n\r\n    /**\r\n     * Internal method that adjusts the opacity of a single line.\r\n     * Will be overwritten in VML fallback mode below.\r\n     */\r\n  , opacity: function (el, i, val) {\r\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val\r\n    }\r\n\r\n  })\r\n\r\n\r\n  function initVML () {\r\n\r\n    /* Utility function to create a VML tag */\r\n    function vml (tag, attr) {\r\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)\r\n    }\r\n\r\n    // No CSS transforms but VML support, add a CSS rule for VML elements:\r\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')\r\n\r\n    Spinner.prototype.lines = function (el, o) {\r\n      var r = o.scale * (o.length + o.width)\r\n        , s = o.scale * 2 * r\r\n\r\n      function grp () {\r\n        return css(\r\n          vml('group', {\r\n            coordsize: s + ' ' + s\r\n          , coordorigin: -r + ' ' + -r\r\n          })\r\n        , { width: s, height: s }\r\n        )\r\n      }\r\n\r\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px'\r\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})\r\n        , i\r\n\r\n      function seg (i, dx, filter) {\r\n        ins(\r\n          g\r\n        , ins(\r\n            css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx})\r\n          , ins(\r\n              css(\r\n                vml('roundrect', {arcsize: o.corners})\r\n              , { width: r\r\n                , height: o.scale * o.width\r\n                , left: o.scale * o.radius\r\n                , top: -o.scale * o.width >> 1\r\n                , filter: filter\r\n                }\r\n              )\r\n            , vml('fill', {color: getColor(o.color, i), opacity: o.opacity})\r\n            , vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\r\n            )\r\n          )\r\n        )\r\n      }\r\n\r\n      if (o.shadow)\r\n        for (i = 1; i <= o.lines; i++) {\r\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')\r\n        }\r\n\r\n      for (i = 1; i <= o.lines; i++) seg(i)\r\n      return ins(el, g)\r\n    }\r\n\r\n    Spinner.prototype.opacity = function (el, i, val, o) {\r\n      var c = el.firstChild\r\n      o = o.shadow && o.lines || 0\r\n      if (c && i + o < c.childNodes.length) {\r\n        c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild\r\n        if (c) c.opacity = val\r\n      }\r\n    }\r\n  }\r\n\r\n  if (typeof document !== 'undefined') {\r\n    sheet = (function () {\r\n      var el = createEl('style', {type : 'text/css'})\r\n      ins(document.getElementsByTagName('head')[0], el)\r\n      return el.sheet || el.styleSheet\r\n    }())\r\n\r\n    var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})\r\n\r\n    if (!vendor(probe, 'transform') && probe.adj) initVML()\r\n    else useCssAnimations = vendor(probe, 'animation')\r\n  }\r\n\r\n  return Spinner\r\n\r\n}));\r\n","/**\r\n * Copyright (c) 2011-2014 Felix Gnass\r\n * Licensed under the MIT license\r\n * http://spin.js.org/\r\n */\r\n\r\n/*\r\n\r\nBasic Usage:\r\n============\r\n\r\n$('#el').spin() // Creates a default Spinner using the text color of #el.\r\n$('#el').spin({ ... }) // Creates a Spinner using the provided options.\r\n\r\n$('#el').spin(false) // Stops and removes the spinner.\r\n\r\nUsing Presets:\r\n==============\r\n\r\n$('#el').spin('small') // Creates a 'small' Spinner using the text color of #el.\r\n$('#el').spin('large', '#fff') // Creates a 'large' white Spinner.\r\n\r\nAdding a custom preset:\r\n=======================\r\n\r\n$.fn.spin.presets.flower = {\r\n  lines:   9\r\n, length: 10\r\n, width:  20\r\n, radius:  0\r\n}\r\n\r\n$('#el').spin('flower', 'red')\r\n\r\n*/\r\n\r\n;(function(factory) {\r\n\r\n  if (typeof exports == 'object') {\r\n    // CommonJS\r\n    factory(require('jquery'), require('spin.js'))\r\n  } else if (typeof define == 'function' && define.amd) {\r\n    // AMD, register as anonymous module\r\n    define(['jquery', 'spin'], factory)\r\n  } else {\r\n    // Browser globals\r\n    if (!window.Spinner) throw new Error('Spin.js not present')\r\n    factory(window.jQuery, window.Spinner)\r\n  }\r\n\r\n}(function($, Spinner) {\r\n\r\n  $.fn.spin = function(opts, color) {\r\n\r\n    return this.each(function() {\r\n      var $this = $(this)\r\n        , data = $this.data()\r\n\r\n      if (data.spinner) {\r\n        data.spinner.stop()\r\n        delete data.spinner\r\n      }\r\n      if (opts !== false) {\r\n        opts = $.extend(\r\n          { color: color || $this.css('color') }\r\n        , $.fn.spin.presets[opts] || opts\r\n        )\r\n        data.spinner = new Spinner(opts).spin(this)\r\n      }\r\n    })\r\n  }\r\n\r\n  $.fn.spin.presets = {\r\n    tiny:  { lines:  8, length: 2, width: 2, radius: 3 }\r\n  , small: { lines:  8, length: 4, width: 3, radius: 5 }\r\n  , large: { lines: 10, length: 8, width: 4, radius: 8 }\r\n  }\r\n\r\n}));\r\n","$(document).ready(function(){\r\n    if(typeof currentPage != 'undefined' && currentPage == 'profile') {\r\n        //SHOW PASSWORD\r\n        $('#showCurrentPassword, #showNewPassword').click(function(){\r\n\r\n            var thisId = $(this).data('for'),\r\n                currentAttr = $('#'+thisId).attr('type'),\r\n                dataInfo = $(this).data('info');\r\n\r\n            if(currentAttr == 'password') {\r\n\r\n                if(dataInfo == 'currentPassword') {\r\n                    $('#currentPassword').attr('type', 'text');\r\n                } else if(dataInfo == 'newPassword') {\r\n                    $('#newPassword').attr('type', 'text');\r\n                }\r\n\r\n            } else if(currentAttr == 'text') {\r\n\r\n                if(dataInfo == 'currentPassword') {\r\n                    $('#currentPassword').attr('type', 'password');\r\n                } else if(dataInfo == 'newPassword') {\r\n                    $('#newPassword').attr('type', 'password');\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        // DROP ZONE PROFILE\r\n        var timeDelay = 3500\r\n        Dropzone.options.avatarZone = {\r\n            clickable: true,\r\n            // acceptedFiles: 'image/jpg,image/jpeg,image/png,image/gif',\r\n            dictDefaultMessage: '<div class=\"avatar-action\"><i class=\"glyphicon glyphicon-camera\"></i></div>',\r\n            sending: function(file,xhr,formData){\r\n                formData.append(\"_token\", csrfToken);\r\n            },\r\n            success: function(file, xhr) {\r\n\r\n                if(xhr.status == 0) {\r\n                    // alert(xhr.errors.Avatar[0]);\r\n                    sweetAlert(\"Oops...\", xhr.errors.Avatar[0], \"error\");\r\n                    $('.dz-success-mark').hide();\r\n                    $('.dz-error-mark')\r\n                                        .show()\r\n                                        .delay(timeDelay)\r\n                                        .fadeOut('slow');\r\n                    $('#avatarZone').css({'box-shadow': '0px 0px 2px 5px rgba(226,131,39,.3)'});\r\n                    // return false;\r\n                } else {\r\n                    $('.dz-success-mark').show().delay(timeDelay).fadeOut('slow');\r\n                    $('.dropzone').css({\r\n                        'background': 'url('+ baseUrl + 'uploads/profile/' + xhr.photo +')',\r\n                        'box-shadow': '0px 0px 2px 5px rgba(101,159,19,.3)'\r\n                    });\r\n                }\r\n\r\n\r\n            },\r\n            error: function(file, errorMessage, xhr) {\r\n                // alert('Unable to process request' || xhr );\r\n                $('.dz-success-mark').hide();\r\n                $('.dz-error-mark')\r\n                                    .show()\r\n                                    .delay(timeDelay)\r\n                                    .fadeOut('slow');\r\n                $('#avatarZone').css({'box-shadow': '0px 0px 2px 5px rgba(226,131,39,.3)'});\r\n                // return false;\r\n            }\r\n        }\r\n\r\n        $('#avatarZone').mouseover(function(){\r\n            $('.avatar-action').show();\r\n        }).mouseout(function(){\r\n            $('.avatar-action').hide();\r\n        });\r\n\r\n        $('#profileForm').submit(function(e){\r\n\r\n            e.preventDefault();\r\n\r\n            if($(this).parsley({ excluded: \"input[type=button], input[type=submit], input[type=reset], input[type=hidden], [disabled], :hidden\" }).isValid()) {\r\n\r\n                $.ajax({\r\n                    url: baseUrl + 'dashboard/profile/store',\r\n                    type: 'post',\r\n                    data: {\r\n                        fullname: $('#fullname').val(),\r\n                        address: $('#address').val(),\r\n                        // email: $('#email').val(),\r\n                        contact: $('#contact').val(),\r\n                        _token: csrfToken\r\n                    },\r\n                    dataType: 'json',\r\n                    success: function(response) {\r\n\r\n                        // console.log(response.status);\r\n\r\n                        if(response.status == 0) {\r\n                            var message = '<ul>';\r\n                            $.each(response.message, function(index, value){\r\n                                message += '<li align=\"left\">' + value + '</li>';\r\n                            })\r\n                            message += '<ul>';\r\n                            sweetAlert({\r\n                                title : \"Oops...\",\r\n                                text: message,\r\n                                type: \"error\",\r\n                                html: true\r\n                            })\r\n                        } else {\r\n                            sweetAlert(\"Good Job!\", 'Profile updated!', \"success\");\r\n                        }\r\n                    },\r\n\r\n                    error: function() {\r\n                        sweetAlert(\"Oops...\", 'Unable to process request!', \"error\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        $('#loginForm').submit(function(e){\r\n\r\n            e.preventDefault();\r\n\r\n            if($(this).parsley({ excluded: \"input[type=button], input[type=submit], input[type=reset], input[type=hidden], [disabled], :hidden\" }).isValid()) {\r\n\r\n                $.ajax({\r\n                    url: baseUrl + 'dashboard/profile/login/update',\r\n                    type: 'post',\r\n                    data: {\r\n                        currentPassword: $('#currentPassword').val(),\r\n                        newPassword: $('#newPassword').val(),\r\n                        _token: csrfToken\r\n                    },\r\n                    success: function(response) {\r\n\r\n                        if(response.status == 0) {\r\n\r\n                            var message = '<ul>';\r\n                            $.each(response.message, function(index, value){\r\n                                message += '<li align=\"left\">' + value + '</li>';\r\n                            });\r\n                            message += '<ul>';\r\n                            sweetAlert({\r\n                                title : \"Oops...\",\r\n                                text: message,\r\n                                type: \"error\",\r\n                                html: true\r\n                            });\r\n                        } else {\r\n                            sweetAlert(\"Good Job!\", 'Profile updated!', \"success\");\r\n                        }\r\n                        // sweetAlert(\"Oops...\", message, \"error\");\r\n                    },\r\n\r\n                    error: function() {\r\n                        sweetAlert(\"Oops...\", 'Unable to process request', \"error\");\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n});\r\n","$(document).ready(function() {\r\n\r\n    var opts = {\r\n          lines: 11 // The number of lines to draw\r\n        , length: 30 // The length of each line\r\n        , width: 20 // The line thickness\r\n        , radius: 54 // The radius of the inner circle\r\n        , scale: 0.25 // Scales overall size of the spinner\r\n        , corners: 1 // Corner roundness (0..1)\r\n        , color: '#000' // #rgb or #rrggbb or array of colors\r\n        , opacity: 0.25 // Opacity of the lines\r\n        , fps: 20 // Frames per second when using setTimeout() as a fallback for CSS\r\n        , zIndex: 0 // The z-index (defaults to 2000000000)\r\n    },\r\n    cardTpl = $('#cardTemplate').length > 0 ?_.template(\r\n        $('#cardTemplate').html()\r\n    ) : '',\r\n    currentEditedId = '';\r\n\r\n\r\n    $('#newNumberForm').submit(function(e) {\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        e.stopImmediatePropagation();\r\n\r\n        var newNumberForm = $(this);\r\n\r\n    if(newNumberForm.parsley({ excluded: \"input[type=button], input[type=submit], input[type=reset], input[type=hidden], [disabled], :hidden\" }).isValid()) {\r\n\r\n            var saveBtn = $(this).children('button');\r\n\r\n            saveBtn.attr('disabled', 'disabled');\r\n\r\n            var userAlias = $('#alias').val(),\r\n                mobileNumber = $('#mobile').val(),\r\n                mobileNetwork = $('#network').val(),\r\n                mobileNetworkText = $('#network option:selected').text();\r\n\r\n            $.ajax({\r\n                url: baseUrl + 'dashboard/number/store',\r\n                type: 'post',\r\n                data: {\r\n                    alias: userAlias,\r\n                    mobile: mobileNumber,\r\n                    network: mobileNetwork,\r\n                    _token: csrfToken\r\n                },\r\n                success: function(response) {\r\n\r\n                    if(response.status == 0) {\r\n                        var message = '<ul>';\r\n\r\n                        $.each(response.message, function(index, value){\r\n                            message += '<li align=\"left\">' + value + '</li>';\r\n                        });\r\n\r\n                        message += '<ul>';\r\n                        sweetAlert({\r\n                            title : \"Oops...\",\r\n                            text: message,\r\n                            type: \"error\",\r\n                            html: true\r\n                        });\r\n\r\n                        newNumberForm.parsley().reset();\r\n\r\n                    } else {\r\n\r\n                        var newNumber = {\r\n                            id: response.id,\r\n                            mobile_number: mobileNumber,\r\n                            alias : userAlias,\r\n                            network: mobileNetworkText\r\n                        };\r\n\r\n\r\n                        sweetAlert(\"Good Job!\", 'Mobile number has been added!', \"success\");\r\n\r\n                        $('.cards-wrapper').prepend(\r\n                            cardTpl({\r\n                                number: newNumber\r\n                            })\r\n                        );\r\n                    }\r\n                    saveBtn.removeAttr('disabled');\r\n                    return false;\r\n                },\r\n\r\n                error: function() {\r\n                    sweetAlert(\"Oops...\", 'Unable to process request!', \"error\");\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    $('.cards-wrapper').on('click', '#removeNumber', function(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        var $this = $(this);\r\n\r\n        $this.spin(opts);\r\n\r\n        $this.blur().tooltip('destroy');\r\n\r\n        $.ajax({\r\n            type: 'post',\r\n            url: baseUrl + 'dashboard/number/destroy',\r\n            data: {\r\n                id : $(this).data('id'),\r\n                _token: csrfToken\r\n            },\r\n            dataType: 'json',\r\n            success: function(response) {\r\n\r\n                if(response.status == 1) {\r\n                    swal(\"Deleted!\", \"Number removed from the list.\", \"success\");\r\n                    $this.replaceWith('<a id=\"undo\" href=\"javascript:void(0);\" data-id=\"'+ $this.data('id') +'\" data-toggle=\"tooltip\" data-placement=\"left\" data-trigger=\"hover\" title=\"Undo remove action\"><i class=\"glyphicon glyphicon-repeat\">');\r\n                } else {\r\n                    swal(\"Opps...\", response.message, \"error\");\r\n                }\r\n\r\n                $this.spin(false);\r\n            },\r\n            error: function() {\r\n                sweetAlert(\"Oops...\", 'Unable to process request!', \"error\");\r\n                return false;\r\n            }\r\n        });\r\n    });\r\n\r\n    $('.cards-wrapper').on(\"click\", '#undo', function() {\r\n\r\n        var $this = $(this);\r\n\r\n        $this.spin(opts);\r\n        $this.blur().tooltip('destroy');\r\n\r\n        $.ajax({\r\n            type: 'post',\r\n            url: baseUrl+'dashboard/number/restore',\r\n            data: {\r\n                id: $(this).data('id'),\r\n                _token: csrfToken\r\n            },\r\n            dataType: 'json',\r\n            success: function(response) {\r\n\r\n                 if(response.status == 1) {\r\n                    swal(\"Restored!\", \"The selected number has been restored.\", \"success\");\r\n                    $this.replaceWith('<a id=\"removeNumber\" href=\"javascript:void(0);\" data-id=\"'+ $this.data('id') +'\" title=\"Remove number\" data-toggle=\"tooltip\" data-placement=\"left\" data-trigger=\"hover\"><i class=\"glyphicon glyphicon-trash\">');\r\n                } else {\r\n                    swal(\"Opps...\", response.message, \"error\");\r\n                }\r\n                $this.spin(false);\r\n\r\n            },\r\n            error:function() {\r\n                sweetAlert(\"Oops...\", 'Unable to process request!', \"error\");\r\n                return false;\r\n            }\r\n        });\r\n    });\r\n\r\n    $('.cards-wrapper').on(\"click\", '[id^=editNumber-]', function() {\r\n\r\n        var editNumberFormTemplate = _.template($('#editNumberTemplate').html()),\r\n            $this = $(this),\r\n            $id = $this.data('id');\r\n\r\n            currentEditedId = $id;\r\n\r\n        $.ajax({\r\n            type: 'post',\r\n            url: baseUrl + 'dashboard/number/details',\r\n            data: {\r\n                id: $id,\r\n                _token : csrfToken\r\n            },\r\n            dataType: \"json\",\r\n            success: function(response) {\r\n\r\n                if(response.status == 1) {\r\n\r\n                    $this.parents('ul').siblings('.number-info')\r\n                                            .empty()\r\n                                            .append(\r\n                                                editNumberFormTemplate({\r\n                                                    details: response\r\n                                                })\r\n                                            );\r\n                } else {\r\n\r\n                    var message = '<ul>';\r\n\r\n                    $.each(response.message, function(index, value) {\r\n                        message += '<li align=\"left\">' + value + '</li>';\r\n                    });\r\n\r\n                    message += '<ul>';\r\n                    sweetAlert({\r\n                        title : \"Oops...\",\r\n                        text: message,\r\n                        type: \"error\",\r\n                        html: true\r\n                    });\r\n                    newNumberForm.parsley().reset();\r\n                }\r\n\r\n            },\r\n            error:function() {\r\n                sweetAlert(\"Oops...\", 'Unable to process request!', \"error\");\r\n                return false;\r\n            }\r\n        });\r\n    });\r\n\r\n    $('.cards-wrapper').on('submit', '#editNumberForm', function(e){\r\n\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        e.stopImmediatePropagation();\r\n\r\n        var editNumberForm = $(this);\r\n\r\n        if(editNumberForm.parsley({ excluded: \"input[type=button], input[type=submit], input[type=reset], input[type=hidden], [disabled], :hidden\" }).isValid()) {\r\n\r\n            var saveBtn = $(this).children('button');\r\n\r\n            saveBtn.attr('disabled', 'disabled');\r\n\r\n            var userAlias = $('#alias-' + currentEditedId).val(),\r\n                mobileNumber = $('#mobile-' + currentEditedId).val(),\r\n                mobileNetwork = $('#network-' + currentEditedId).val(),\r\n                mobileNetworkText = $('#network-' +  + currentEditedId +' option:selected').text();\r\n\r\n            $.ajax({\r\n                url: baseUrl + 'dashboard/number/update',\r\n                type: 'post',\r\n                data: {\r\n                    id: currentEditedId,\r\n                    alias: userAlias,\r\n                    mobile: mobileNumber,\r\n                    network: mobileNetwork,\r\n                    _token: csrfToken\r\n                },\r\n                success: function(response) {\r\n\r\n                    if(response.status == 0) {\r\n                        var message = '<ul>';\r\n\r\n                        $.each(response.message, function(index, value){\r\n                            message += '<li align=\"left\">' + value + '</li>';\r\n                        });\r\n\r\n                        message += '<ul>';\r\n                        sweetAlert({\r\n                            title : \"Oops...\",\r\n                            text: message,\r\n                            type: \"error\",\r\n                            html: true\r\n                        });\r\n\r\n                        editNumberForm.parsley().reset();\r\n\r\n                    } else {\r\n\r\n                        var updatedNumber = {\r\n                                \"id\": currentEditedId,\r\n                                \"mobile_number\": mobileNumber,\r\n                                \"alias\": userAlias,\r\n                                \"network\": mobileNetworkText\r\n                        };\r\n\r\n                        editNumberForm.parents('div.number-info')\r\n                                        .parents('div.card')\r\n                                        .parents('.card-wrapper')\r\n                                        .empty()\r\n                                        .replaceWith(\r\n                                            cardTpl({number : updatedNumber})\r\n                                        )\r\n\r\n                        // console.log(editNumberForm.parents('div.number-info').parents('div.card').parents('.card-wrapper')[0]);\r\n\r\n                    }\r\n                    saveBtn.removeAttr('disabled');\r\n                    return false;\r\n                },\r\n\r\n                error: function() {\r\n                    sweetAlert(\"Oops...\", 'Unable to process request!', \"error\");\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n});\r\n","$(document).ready(function(){\r\n    $('[data-toggle=\"help-popover\"]').popover({ trigger: 'hover', placement: 'bottom', html: true });\r\n\r\n    /*  TAB MENU */\r\n    // for bootstrap 3 use 'shown.bs.tab', for bootstrap 2 use 'shown' in the next line\r\n    $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) {\r\n        // save the latest tab; use cookies if you like 'em better:\r\n        localStorage.setItem('lastTab', $(this).attr('href'));\r\n    });\r\n\r\n    // go to the latest tab, if it exists:\r\n    var lastTab = localStorage.getItem('lastTab');\r\n    if (lastTab) {\r\n        $('[href=\"' + lastTab + '\"]').tab('show');\r\n    }\r\n\r\n    // $('[data-toggle=\"tooltip\"]').tooltip();\r\n    $(document).on('mouseenter','[data-toggle=tooltip]', function(){\r\n        $(this).tooltip('show');\r\n    });\r\n\r\n    $(document).on('mouseleave','[data-toggle=tooltip]', function(){\r\n        $(this).tooltip('hide');\r\n    });\r\n});\r\n"],"sourceRoot":"/source/"}